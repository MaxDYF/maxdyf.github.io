<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023 CCPC Asia Regional Qinghuangdao</title>
    <url>/3039462216/</url>
    <content><![CDATA[<h2 id="problem-d-茶和咖啡">Problem D 茶和咖啡</h2>
<h3 id="思路">思路</h3>
<p>观察到能用的券只取决于最早的选择天数，设当前最早的喝咖啡日为<code>pos</code>，则每新增一天，我们有以下两种策略：</p>
<ol type="1">
<li>选择比目前最早的天数更早的一天，即从<code>[1, pos-1]</code>天中选择一天。</li>
<li>选择比<code>pos</code>更晚的一天，即<code>[pos+1, n]</code>天。</li>
</ol>
<p>对于第一种，我们可以做优惠券的后缀和<code>w[i]</code>，表示第<code>i</code>天能享用的优惠券的总优惠，则可知选择第<code>i</code>天的贡献值为<code>w[i]-w[pos]</code>，则最优决策显然为：<span
class="math inline">\(min_{i=1}^{pos-1}(w[i])-w[pos]\)</span>，显然可以用<code>std::set</code>或权值线段树进行维护。</p>
<p>对于第二种，我们只需求<code>[pos+1, n]</code>中最小的<code>a[i]</code>，即<span
class="math inline">\(min_{i=pos+1}^n(a[i])\)</span>。同样用<code>set</code>或权值线段树维护即可。</p>
<p>然后对比两种决策，选更优的决策即可。</p>
<p>*当两种最优决策贡献值相等时，注意到前一种可以使下一次的决策数量增加更多，所以选择向前扩展。</p>
<p>总的复杂度<span class="math inline">\(O(Tnlog_2n)\)</span>。</p>
<p>## Problem F 质数之谜</p>
<h3 id="思路-1">思路</h3>
<p>注意到，若<code>a[i]+a[i-1]</code>是质数，则<code>a[i]</code>与<code>a[i-1]</code>的奇偶性必然不同（相同相加为偶数）。</p>
<p>可以大胆猜测：对于一个确定的数，我们总能找到一个与其奇偶性不同的数，使二者的和为质数（波利尼亚克猜想）。</p>
<p>进一步观察，发现有特例：<code>1+1=2</code>，2为质数。</p>
<p>则考虑分为几类情况考虑：</p>
<ol type="1">
<li>保持原数不变</li>
<li>改为1</li>
<li>改为除1外的奇数</li>
<li>改为除2外的偶数</li>
</ol>
<p>对4种情况分类讨论，dp即可。</p>
<p>复杂度<span class="math inline">\(O(n)\)</span>。</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>XCPC</tag>
        <tag>CCPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Atcoder ARC170</title>
    <url>/2559690570/</url>
    <content><![CDATA[<h2 id="a---yet-another-ab-problem">A - Yet Another AB Problem</h2>
<p>对于几种情况，分类讨论一下：</p>
<ol type="1">
<li><code>s[i]!=t[i],t[i]=='A'</code>：这种情况，需要向后找一个<code>t[j]=='B'</code>；</li>
<li><code>s[i]!=t[i],t[i]=='B'</code>：这种情况，需要向前找一个<code>t[j]=='A'</code>。</li>
</ol>
<p>若所有条件满足，则可以判定可行。要取得最小值，显然我们应当尽可能将1、2两种<code>s[i]!=t[i]</code>情况合起来（一次操作可以解决两个冲突），若是找不到，再与<code>s[i]==t[i]</code>的合起来（一次操作只解决一个冲突）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A - Yet Another AB Problem</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Regular Contest 170</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/arc170/tasks/arc170_a</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s1, s2;</span><br><span class="line">	cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">	<span class="keyword">if</span> (s1 == s2)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> isA = <span class="number">0</span>, needB = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>, turnA = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s1[i] == s2[i] &amp;&amp; s1[i] == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">			isA = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s1[i] == s2[i])</span><br><span class="line">			needB = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s1[i] == <span class="string">&#x27;A&#x27;</span>) <span class="comment">// need to turn B</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (turnA &gt; <span class="number">0</span>)</span><br><span class="line">				turnA--, needB = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (isA)</span><br><span class="line">				cnt++, needB = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">// need to turn A</span></span><br><span class="line">		&#123;</span><br><span class="line">			turnA++;</span><br><span class="line">			cnt++;</span><br><span class="line">			isA = <span class="number">1</span>;</span><br><span class="line">			needB = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (needB == <span class="number">0</span>)</span><br><span class="line">		cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---arithmetic-progression-subsequence">B - Arithmetic
Progression Subsequence</h2>
<p>容易想到通过枚举中间值，两边找等差数的想法。但是，很难解决子段重复计数的问题（一个区间可能包含多对等差数）。考虑其他做法。</p>
<p>注意到<code>a[i]</code>的值域很小(<code>1~10</code>)，那么，最小的合法子段的长度也很小（至多21个数就会出现3个相等的数）。这样，我们可以暴力枚举子段，然后直接暴力判断字段的合法性。当第一次合法时直接计算剩余贡献即可。时间复杂度为<span
class="math inline">\(\Theta(n\omega^4)\)</span>（<span
class="math inline">\(\omega\)</span>为值域），大约为<span
class="math inline">\(O(1e9)\)</span>左右，可以通过此题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B - Arithmetic Progression Subsequence</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Regular Contest 170</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/arc170/tasks/arc170_b</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> pre[N][<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</span><br><span class="line">			pre[i][j] = pre[i - <span class="number">1</span>][j];</span><br><span class="line">		pre[i][a[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = l;i &lt;= r; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= r; j++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>; k &lt;= r; k++)</span><br><span class="line">					<span class="keyword">if</span> (a[j] - a[i] == a[k] - a[j])</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(i, j))</span><br><span class="line">			&#123;</span><br><span class="line">				ans += n - j + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---prefix-mex-sequence">C - Prefix Mex Sequence</h2>
<p>一道很巧妙的dp题。</p>
<p>一开始，想的是令<code>dp[i][j]</code>表示前<span
class="math inline">\(i\)</span>项，<span
class="math inline">\(mex=j\)</span>的情况总数。然后发现状态非常复杂，无法判断之前放置了多少个大于<span
class="math inline">\(mex\)</span>的数，转移无法进行。</p>
<p>官方题解采用了一种很巧妙的思路避开了<span
class="math inline">\(mex\)</span>前后的不确定性。</p>
<p><span
class="math inline">\(mex\)</span>的本质，就是一个不同于集合内任何一个数的数；将<span
class="math inline">\(mex\)</span>放进集合内，相当于令集合内不同数的个数+1。</p>
<p>于是，我们令<code>dp[i][j]</code>表示前<span
class="math inline">\(i\)</span>项，集合内有<span
class="math inline">\(j\)</span>个不同的数。接下来讨论：</p>
<ol type="1">
<li><p><span class="math inline">\(s[i]=1\)</span>：加入了一个<span
class="math inline">\(mex\)</span>，相当于加入了一个不同于之前任意一个值的数，则直接转移：
<span class="math display">\[
f[i][j] =f[i-1][j-1]
\]</span></p></li>
<li><p><code>s[i]=0</code>：加入一个不等于<span
class="math inline">\(mex\)</span>的数，则这个数可能是小于<span
class="math inline">\(mex\)</span>的数，也可能是大于的数。但是，归根结底，这只分为两种情况：</p>
<ol type="1">
<li>这个数在原来有的<span
class="math inline">\(j\)</span>个数内，总共<span
class="math inline">\(j\)</span>种可能性。</li>
<li>这个数不在原来的<span
class="math inline">\(j\)</span>个数内，总共<span
class="math inline">\(m-j+1\)</span>种可能性。</li>
</ol>
<p>那么，我们就可以根据这个写出递推方程： <span class="math display">\[
f[i][j]=f[i-1][j]*j+f[i-1][j-1]*(m-j+1)
\]</span></p></li>
</ol>
<p>通过这样的方式，我们就很巧妙地避开了对<span
class="math inline">\(mex\)</span>的讨论，转而讨论更容易维护的种类数，从而在<span
class="math inline">\(\Theta(n\min(n,m))\)</span>的时间内完成了这道题目。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C - Prefix Mex Sequence</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Regular Contest 170</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/arc170/tasks/arc170_c</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line">ll n, m, k, q, lim;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353ll</span>;</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; lim;</span><br><span class="line">	m = <span class="built_in">min</span>(lim + <span class="number">1</span>, n);</span><br><span class="line">	f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)	</span><br><span class="line">				f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] * (lim - j + <span class="number">1</span>) + f[i - <span class="number">1</span>][j] * (j)) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">		ans = (ans + f[n][i]) % mod;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1572B Xor of 3</title>
    <url>/1591175046/</url>
    <content><![CDATA[<h2 id="题意">题意</h2>
<p>给出一个 01
序列，一次操作可以选择连续的三个数，把它们都变成三个数的异或和。</p>
<p>问能否在 <span class="math inline">\(n\)</span> 次以内全变成
0，输出方案。</p>
<h2 id="思路">思路</h2>
<p>显然，把三个数都变为异或和不改变异或和，则若所有数异或和为0，无解。</p>
<p>若<span class="math inline">\(n\)</span>为奇数，则可以依次操作<span
class="math inline">\(n-2, n-4,n-6,...1\)</span>，则操作后有<span
class="math inline">\(a_1=0, a_{2k}=a_{2k+1}\)</span>，则再依次对<span
class="math inline">\(1,3,5,...n-2\)</span>操作，可使所有数变为0。</p>
<p>若n为偶数，则可将数列拆成两段长度为奇数、异或和为0的子数列，分别操作。若没有为0的奇子数列，则无解。</p>
<h2 id="code">Code</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: Xor of 3</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1572B</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Auther : MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">sum</span><span class="params">(n)</span>, ans</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i], sum[i] = sum[i - <span class="number">1</span> &lt; <span class="number">0</span> ? <span class="number">0</span> : i - <span class="number">1</span>] ^ a[i];</span><br><span class="line">	<span class="keyword">if</span> (sum[n - <span class="number">1</span>])</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> stop = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span> (!sum[i])</span><br><span class="line">			&#123;</span><br><span class="line">				stop = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span> (stop == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		stop++;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = stop - <span class="number">2</span>; i &gt;= <span class="number">1</span>; i -= <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; stop; i += <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">		stop++;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= stop; i -= <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = stop; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">			ans.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span> &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ans)</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1579G Minimal Coverage</title>
    <url>/2908805891/</url>
    <content><![CDATA[<h2 id="题意">题意</h2>
<ul>
<li>给你 <span class="math inline">\(n\)</span>
条线段，告诉你每条线段的<strong>长度</strong>。</li>
<li>你需要把它们放在一条<strong>无限长的数轴</strong>上。</li>
<li>放置需满足<strong>当前线段的起点</strong>是<strong>前一个线段的终点</strong>，特别的第一个线段的起点为
00。</li>
</ul>
<p>也就是说，若前一个线段的终点是 <span
class="math inline">\(x\)</span>,当前长度为 <span
class="math inline">\(d\)</span>, 那么这个线段必须放在<span
class="math inline">\([x, x+d]\)</span> ，或者<span
class="math inline">\([x-d,x]\)</span></p>
<ul>
<li><span class="math inline">\(1≤t≤10^4,1≤n≤10^4\)</span></li>
</ul>
<h2 id="思路">思路</h2>
<p>最小覆盖长度，考虑二分答案，<span
class="math inline">\(dp_{i,j}\)</span>表示第<span
class="math inline">\(i\)</span>个线段终点落在<span
class="math inline">\(j\)</span>的可行性，注意此时<span
class="math inline">\(j\)</span>不表示实际坐标，而是表示实际覆盖区间的相对坐标。</p>
<p>初始时<span class="math inline">\(dp_{0,0...mid}\)</span>全为<span
class="math inline">\(true\)</span>，因为线段1可以放在任何坐标上，容易写出转移方程：</p>
<p>$ dp_{i,j} = [dp{i-1,j - d_i} * (j - d_i lim)]  or
 [dp_{i-1,j+d_i}*(j+d_i )$</p>
<p>单次check时间复杂度为<span
class="math inline">\(O(n^2)\)</span>，可用<code>bitset</code>优化时间，加上滚动数组优化掉第一维。</p>
<p>总时间复杂度为<span class="math inline">\(O(n^2log_2n)\)</span>。</p>
<h2 id="code">Code</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: Minimal Coverage</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1579G</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Auther : MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">bitset&lt;N&gt; s, mod;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> lim)</span><br><span class="line">	&#123;</span><br><span class="line">		s.<span class="built_in">reset</span>();</span><br><span class="line">		mod.<span class="built_in">reset</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lim; i++)</span><br><span class="line">			s.<span class="built_in">set</span>(i), mod.<span class="built_in">set</span>(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> d : a)</span><br><span class="line">			s = ((s &gt;&gt; d) | (s &lt;&lt; d)) &amp; mod;</span><br><span class="line">		<span class="keyword">return</span> s.<span class="built_in">any</span>(); </span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">0</span>, r = N, ans = <span class="number">0</span>, mid;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">		&#123;</span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			l = mid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1579G Minimal Coverage</title>
    <url>/2908805892/</url>
    <content><![CDATA[<h2 id="题意">题意</h2>
<p>给定一张<span class="math inline">\(n\)</span> 个点的有向图，若 <span
class="math inline">\(i\)</span>&lt;<span
class="math inline">\(j\)</span>则 <span
class="math inline">\(i\)</span> 到<span
class="math inline">\(j\)</span>有边。现要求用最小的颜色数量给边染色，使任意一条长度为
<span class="math inline">\(k\)</span> 的路径不同色。输出方案。</p>
<h2 id="思路">思路</h2>
<p>将<span
class="math inline">\(1,2,3...k\)</span>的边全部设置为1，将<span
class="math inline">\(k+1,k+2,k+3...2k\)</span>的边设为1，一直至<span
class="math inline">\(k^2\)</span>，然后在每个<span
class="math inline">\(k\)</span>的块内的边设为2，在<span
class="math inline">\(k^2\)</span>的块内的边设为3，以此类推，则最终答案数为<span
class="math inline">\(\lceil log_kn\rceil\)</span>。</p>
<h2 id="code">Code</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: Defender of Childhood Dreams</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1583F</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// Auther : MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	cout &lt;&lt; (<span class="type">int</span>)(<span class="built_in">ceil</span>(<span class="built_in">log</span>(n) / <span class="built_in">log</span>(k))) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x = i, y = j;</span><br><span class="line">			<span class="type">int</span> col = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (x != y)</span><br><span class="line">			&#123;</span><br><span class="line">				x /= k;</span><br><span class="line">				y /= k;</span><br><span class="line">				col++;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; col &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1886D Monocarp and the Set</title>
    <url>/1661967881/</url>
    <content><![CDATA[<h2 id="题意">题意</h2>
<p>有一个大小为<span
class="math inline">\(n\)</span>的排列，以某种顺序插入一个集合中，给出一个长度为<span
class="math inline">\(n-1\)</span>的字符串，第<span
class="math inline">\(i\)</span>位表示第<span
class="math inline">\(i+1\)</span>个插入的数在已有集合中的情况，<span
class="math inline">\(&lt;\)</span>为最小，<span
class="math inline">\(&gt;\)</span>为最大，<span
class="math inline">\(?\)</span>为其他情况，给出q个单次修改，每次修改后询问其顺序的可能数。</p>
<h2 id="思路">思路</h2>
<p>先考虑静态，设当前为<code>str[i]</code>,正在插入第<span
class="math inline">\(i+1\)</span>个数，则说明前面有<span
class="math inline">\(i\)</span>个数。若当前位为<code>&gt;</code>或<code>&lt;</code>，则说明该数在目前唯一确定；若为<code>?</code>，则共有<span
class="math inline">\(i-1\)</span>个空可插入，方案数应<span
class="math inline">\(*(i-1)\)</span>。在<span
class="math inline">\(O(n)\)</span>的时间内可预处理完毕。</p>
<p>考虑动态，因为某一位的情况没有后效性影响，因此可以<span
class="math inline">\(O(1)\)</span>动态维护每次方案，注意有模数，在除法时要使用逆元。</p>
<h2 id="code">Code</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Monocarp and the Set</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 156 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1886/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Auther : MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353ll</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	string a;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	<span class="keyword">auto</span> pw = [&amp;](ll base, ll x)</span><br><span class="line">	&#123;</span><br><span class="line">		ll ans = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (x)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">				ans = (ans * base) % mod;</span><br><span class="line">			x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">			base = (base * base) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;;</span><br><span class="line">	ll ans = <span class="number">1</span>, bj = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">				bj = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				ans = (ans * i) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">	cout &lt;&lt; ans * bj &lt;&lt; endl;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, q; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; q &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">if</span> (q == <span class="number">1</span> &amp;&amp; ch != <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">			bj = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="number">1</span> &amp;&amp; ch == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">			bj = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[q - <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">				ans = (ans * <span class="built_in">pw</span>(q - <span class="number">1</span>, mod - <span class="number">2</span>) % mod);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (a[q - <span class="number">1</span>] != <span class="string">&#x27;?&#x27;</span> &amp;&amp; ch == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">				ans = (ans * (q - <span class="number">1</span>)) % mod;</span><br><span class="line">		&#125;</span><br><span class="line">		a[q - <span class="number">1</span>] = ch;</span><br><span class="line">		cout &lt;&lt; ans * bj &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1904D2 Set To Max (D2)</title>
    <url>/2477072616/</url>
    <content><![CDATA[<h2 id="题意">题意</h2>
<p>给定两个长度为<span class="math inline">\(n\)</span>的序列<span
class="math inline">\(a\)</span>和<span
class="math inline">\(b\)</span>，每次操作可以选择一对<span
class="math inline">\(\{l,r\}\)</span>，将<span
class="math inline">\(a_l, a_{l+1},
a_{l+2}...a_r\)</span>变为其中的最大值，问是否能将<span
class="math inline">\(a\)</span>变为<span
class="math inline">\(b\)</span>。</p>
<h2 id="思路">思路</h2>
<p>考虑能让<span class="math inline">\(a_i\)</span>变成<span
class="math inline">\(b_i\)</span>的条件，分为三种情况：</p>
<ol type="1">
<li><span class="math inline">\(a_i=b_i\)</span>，则必然可以。</li>
<li><span class="math inline">\(a_i&gt;
b_i\)</span>，可知一定无解。</li>
<li><span
class="math inline">\(a_i&lt;b_i\)</span>，则需要从两边寻找一个<span
class="math inline">\(a_j=b_i\)</span>使得<span
class="math inline">\(a_i\)</span>变成<span
class="math inline">\(b_i\)</span>。</li>
</ol>
<p>对于第三种情况，可以发现如果要在不影响其他位置成立的情况下使得<span
class="math inline">\(a_i\)</span>变成<span
class="math inline">\(b_i\)</span>，其充分必要条件是对于<span
class="math inline">\(a_{i...j}\)</span>与<span
class="math inline">\(b_{i...j}\)</span>，满足 <span
class="math display">\[
a_k \leq b_i, for\ k\in[i, j]\\\ b_k  \geq b_i, for\ k\in[i, j]
\]</span> 可以简化为 <span class="math display">\[
max_{k=i}^{j}a_k\leq b_i \leq min_{k=i}^{j}b_k
\]</span></p>
<p>从前往后、从后往前分别扫一遍，最值操作用st表或线段树预处理即可，时间复杂度<span
class="math inline">\(\Theta(n log_2n)\)</span>。</p>
<h2 id="代码">代码</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D2. Set To Max (Hard Version)</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 914 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1904/problem/D2</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 4000 ms</span></span><br><span class="line"><span class="comment">// Auther : MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> b[N];</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line"><span class="type">int</span> l2[N];</span><br><span class="line"><span class="type">int</span> st1[N][<span class="number">30</span>], st2[N][<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> lst[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="built_in">fill</span>(vis, vis + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= l2[n]; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			st1[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">			st2[i][<span class="number">0</span>] = inf;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		st1[i][<span class="number">0</span>] = a[i];</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; b[i];</span><br><span class="line">		st2[i][<span class="number">0</span>] = b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= l2[n]; t++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">			st1[i][t] = <span class="built_in">max</span>(st1[i][t - <span class="number">1</span>], st1[i + (<span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>))][t - <span class="number">1</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= l2[n]; t++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; t) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">			st2[i][t] = <span class="built_in">min</span>(st2[i][t - <span class="number">1</span>], st2[i + (<span class="number">1</span> &lt;&lt; (t - <span class="number">1</span>))][t - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">auto</span> query1 = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t = l2[r - l + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">max</span>(st1[l][t], st1[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> query2 = [&amp;](<span class="type">int</span> l, <span class="type">int</span> r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> t = l2[r - l + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">min</span>(st2[l][t], st2[r - (<span class="number">1</span> &lt;&lt; t) + <span class="number">1</span>][t]);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">fill</span>(lst, lst + n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		lst[a[i]] = i;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == b[i])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (lst[b[i]] == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">query1</span>(lst[b[i]], i) &lt;= b[i] &amp;&amp; <span class="built_in">query2</span>(lst[b[i]], i) &gt;= b[i])</span><br><span class="line">			vis[i] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fill</span>(lst, lst + n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		lst[a[i]] = i;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == b[i])</span><br><span class="line">		&#123;</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (lst[b[i]] == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">query1</span>(i, lst[b[i]]) &lt;= b[i] &amp;&amp; <span class="built_in">query2</span>(i, lst[b[i]]) &gt;= b[i])</span><br><span class="line">			vis[i] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> suc = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			suc = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	cout &lt;&lt; (suc ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	l2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">		l2[i] = l2[i / <span class="number">2</span>] + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeTON Round 8 (Div1+Div2)</title>
    <url>/2521750448/</url>
    <content><![CDATA[<p>喜提2 TON币，好耶</p>
<h2 id="a.-farmer-johns-challenge">A. <a
href="https://codeforces.com/contest/1942/problem/A">Farmer John's
Challenge</a></h2>
<p>对于<span
class="math inline">\(n=k\)</span>的情况，显然构造一个全为1的序列是合法的。</p>
<p>对于<span
class="math inline">\(k=1\)</span>的情况，显然构造1至n的序列合法。</p>
<p>对于这之外的情况，我们设想一个有序序列，如果其循环左移<span
class="math inline">\(k(k \not=1且k \not=
n)\)</span>次后仍然合法，那么也就是说，原序列最小的数要等于最大的数，也就是所有数相等，显然k不可能为n以外的数。所以直接输出-1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Farmer John&#x27;s Challenge</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - CodeTON Round 8 (Div. 1 + Div. 2, Rated, Prizes!)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1942/problem/0</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">if</span> (n == k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-bessie-and-mex">B. <a
href="https://codeforces.com/contest/1942/problem/B">Bessie and
MEX</a></h2>
<p>考虑倒推。对于第n位，有<span class="math inline">\(a_n\)</span> =
<span class="math inline">\(\texttt{MEX}(p_1, p_2, \ldots, p_n) -
p_n\)</span>。而<span class="math inline">\(\texttt{MEX}(p_1, p_2,
\ldots, p_n)\)</span>显然应该等于<span
class="math inline">\(n\)</span>，所以<span
class="math inline">\(p_n\)</span>是能够唯一确定的。然后根据这个反推回去即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Bessie and MEX</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - CodeTON Round 8 (Div. 1 + Div. 2, Rated, Prizes!)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1942/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="comment">// p[n    ] = n - a[n]</span></span><br><span class="line"><span class="comment">// p[n - 1] = p[n] - a[n - 1]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="type">int</span> lst = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		p[i] = lst - a[i];</span><br><span class="line">		lst = <span class="built_in">min</span>(lst, p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cout &lt;&lt; p[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-bessies-birthday-cake">C. <a
href="https://codeforces.com/contest/1942/problem/C1">Bessie's Birthday
Cake</a></h2>
<h3 id="easy-verson-solution">Easy Verson Solution</h3>
<p>先考虑简单版本的。如果没有加点操作，那么原多边形很显然是被划分成了两部分面积：</p>
<ol type="1">
<li>选中的<span class="math inline">\(x\)</span>个点构成的多边形。</li>
<li>除了这个多边形剩下的若干个多边形。</li>
</ol>
<p>对于第一部分，很显然，由于每个点都可以选，它所构成的三角形最多就是<span
class="math inline">\(x-2\)</span>个。</p>
<p>对于第二部分，可以发现他们有且仅有两个相邻的可选点，无法连线构成新的三角形。也就是说，只有在这个多边形本身是个三角形的情况下，才有可能对答案有贡献。所以加上这部分三角形的个数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C1. Bessie&#x27;s Birthday Cake (Easy Version)</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - CodeTON Round 8 (Div. 1 + Div. 2, Rated, Prizes!)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1942/problem/C1</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + x + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> ans = x - <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; x; i++)</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(a[i] - a[i + <span class="number">1</span>]) == <span class="number">2</span>)</span><br><span class="line">			ans++;</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] + n - a[x] == <span class="number">2</span>)</span><br><span class="line">		ans++;</span><br><span class="line">	cout &lt;&lt;  ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hard-version-solution">Hard Version Solution</h3>
<p>现在有了加点的操作，我们思考应该怎么加。</p>
<p>第一部分的多边形全部都是计数点，不需要加，所以考虑第二部分的多边形。</p>
<p>设这个多边形除了已选中的两个点外，还有<span
class="math inline">\(p\)</span>个点，那么，我们可以讨论一下：</p>
<ol type="1">
<li><p>如果要将这个多边形产生<span
class="math inline">\(p\)</span>个三角形（即最多的情况下）</p>
<p>在这种情况下，我们发现，<span
class="math inline">\(p\)</span>的奇偶性会影响加点的个数。</p>
<ol type="1">
<li>如果<span class="math inline">\(p\)</span>为奇数，则需加<span
class="math inline">\(\frac{p-1}2\)</span>个点（加<span
class="math inline">\(k\)</span>个点，产生<span
class="math inline">\(2k+1\)</span>个三角形）</li>
<li>如果<span class="math inline">\(p\)</span>为偶数，则要加<span
class="math inline">\(\frac p 2\)</span>个点。（加<span
class="math inline">\(k\)</span>个点，产生<span
class="math inline">\(2k\)</span>个三角形）</li>
</ol>
<p>显然，如果我能加的点的个数有限，那我肯定会优先将<span
class="math inline">\(p\)</span>​为奇数的多边形先加满（同等加点下获得的三角形更多），然后才是偶数的多边形。</p></li>
<li><p>如果要产生不足<span
class="math inline">\(p\)</span>个三角形（不加满）</p>
<p>这种情况下，倘若我加了<span
class="math inline">\(k\)</span>个点，那么会产生<span
class="math inline">\(2k\)</span>个三角形。</p></li>
</ol>
<p>综上，只有p为偶数且加满的情况下我们才有额外收获，否则就是一个点两个三角形。我们只要从小到大地对所需的<span
class="math inline">\(p\)</span>为奇数的多边形尽可能取，然后再对其他点应加尽加，最后累计答案即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C1. Bessie&#x27;s Birthday Cake (Easy Version)</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - CodeTON Round 8 (Div. 1 + Div. 2, Rated, Prizes!)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1942/problem/C1</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line">ll n, m, k, q;</span><br><span class="line">ll a[N];</span><br><span class="line">ll b[N], c[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x, y;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + x + <span class="number">1</span>);</span><br><span class="line">	<span class="type">int</span> tot1 = <span class="number">0</span>, tot2 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ans = x - <span class="number">2</span>, lst = a[x];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> dis = (n + a[i] - lst) % n;</span><br><span class="line">		<span class="keyword">if</span> (dis == <span class="number">2</span>)</span><br><span class="line">			ans++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (dis &gt; <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (dis &amp; <span class="number">1</span>)</span><br><span class="line">				c[++tot2] = dis;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				b[++tot1] = dis;</span><br><span class="line">		&#125;</span><br><span class="line">		lst = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(b + <span class="number">1</span>, b + tot1 + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(c + <span class="number">1</span>, c + tot2 + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll t = <span class="built_in">min</span>(y, (b[i] - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		y -= t;</span><br><span class="line">		<span class="keyword">if</span> ((b[i] - <span class="number">1</span>) - <span class="number">2</span> * t == <span class="number">1</span>)</span><br><span class="line">			ans += <span class="number">2</span> * t + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			ans += <span class="number">2</span> * t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot2; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll t = <span class="built_in">min</span>(y, (c[i] - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		y -= t;</span><br><span class="line">		ans += <span class="number">2</span> * t;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt;  ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-learning-to-paint补">D. <a
href="https://codeforces.com/contest/1942/problem/D">Learning to
Paint</a>(补)</h2>
<p>官方题解这个思路很清奇，我也没想好怎么描述，就先放个Link上来罢</p>
<p><a href="https://codeforces.com/blog/entry/126942">Link Here</a></p>
<blockquote>
<p>Let <span class="math inline">\(\texttt{dp}[i]\)</span> store a list
of all <span class="math inline">\(\min(k, 2^i)\)</span> highest
beauties of a painting in <strong>non-increasing</strong> order if you
only paint cells <span class="math inline">\(1,2,\ldots ,i\)</span>.
Let's define <strong>merging</strong> two lists as creating a new list
that stores the <span class="math inline">\(k\)</span> highest values
from the two lists. First, let's look at a slow method of transitioning.
We iterate over the left endpoint <span class="math inline">\(l\)</span>
such that <span class="math inline">\(l \ldots i\)</span> is a maximal
painted interval. At each <span class="math inline">\(l\)</span>, we
merge <span class="math inline">\(\texttt{dp}[l - 2]\)</span>, with
<span class="math inline">\(a_{l,i}\)</span> added to each value, into
<span class="math inline">\(\texttt{dp}[i]\)</span>. We also merge <span
class="math inline">\(\texttt{dp}[i - 1]\)</span> into <span
class="math inline">\(\texttt{dp}[i]\)</span> to handle the case in
which we do not paint cell <span class="math inline">\(i\)</span>. If
implemented well, transitioning takes <span
class="math inline">\(\mathcal{O}(nk)\)</span> time leading to an <span
class="math inline">\(\mathcal{O}(n^2k)\)</span> solution which is too
slow. We can speed this up. This merging process boils down to finding
the <span class="math inline">\(k\)</span> largest elements from <span
class="math inline">\(n\)</span> <strong>non-increasing</strong> lists
in <span class="math inline">\(\mathcal{O}((n + k) \log n)\)</span>
time. We can use a priority queue that stores (<span
class="math inline">\(\texttt{element}, \texttt{index}\)</span>) for
each list. We can do the following <span
class="math inline">\(k\)</span> times: add the top of the priority
queue to our answer, advance its index, and update the priority queue
accordingly. This allows us to transition in <span
class="math inline">\(\mathcal{O}((n + k) \log n)\)</span> time which
leads to an <span class="math inline">\(\mathcal{O}((n^2 + nk) \log
n)\)</span> solution.</p>
</blockquote>
<h2 id="e.-farm-game">E. <a
href="https://codeforces.com/contest/1942/problem/E">Farm Game</a></h2>
<p>很离谱的一道博弈+组合题。</p>
<h3 id="一个小结论">一个小结论</h3>
<p>对于<span class="math inline">\(\ldots
ABABAB\ldots\)</span>这样棋局，我们只需考虑<span
class="math inline">\(A\)</span>先手的情况，然后答案乘上2就是最终答案。</p>
<p>证明：对于一个这样的先手必胜态$ABABAB<span
class="math inline">\(，其一定有一个一一对应的、镜像的先手必胜态\)</span>BABABA$，反之亦然。</p>
<p>所以我们接下来可以只讨论<span class="math inline">\(\ldots ABABAB
\ldots\)</span>这种情况。</p>
<h3 id="简化问题">简化问题</h3>
<p>先讨论<span
class="math inline">\(n=1\)</span>的情况，也就是只有一对<span
class="math inline">\(AB\)</span>的情况。</p>
<h4 id="情况1.-ab间隔为0">情况1. AB间隔为0</h4>
<p>也就是说AB是挨着的。那么，先手自然是没得选，只能往B的反方向走。B只要一直跟着A，就能把<span
class="math inline">\(A\)</span>给堵死在墙角。所以这是个先手必败态。</p>
<h4 id="情况2.-ab间隔为1">情况2. AB间隔为1</h4>
<p>也就是<span class="math inline">\(\dots
A\_B\ldots\)</span>这种情况。这种情况下就反过来了。A只要往B靠一步，就变成了情况1，也就是后手必败态，先手必胜态。</p>
<p>进一步，我们发现，当间隔继续加大时，为了使自己获胜，<span
class="math inline">\(A\)</span>和<span
class="math inline">\(B\)</span>都会尽可能地向对方靠近以将对方挤到墙边。</p>
<p>所以对于<span
class="math inline">\(AB\)</span>间隔为偶数的情况，实际上和情况1一致，即先手必败；<span
class="math inline">\(AB\)</span>间隔为奇数时，与情况2一致，先手必胜。</p>
<h3 id="多组ab的情况">多组AB的情况</h3>
<p>刚才只讨论了<span
class="math inline">\(AB\)</span>只有一组的情况。倘若有多组呢？</p>
<p>按照刚刚讨论的，一对<span
class="math inline">\(AB\)</span>显然都是要往对方靠拢的（逃离那方显然就是必败了），所以每一组<span
class="math inline">\(AB\)</span>之间的空间，实际上不影响胜负态。所以转而讨论这些<span
class="math inline">\(AB\)</span>间隔。</p>
<h4 id="如果ab间距全为奇数或全为偶数">如果AB间距全为奇数或全为偶数</h4>
<p>这样的话，实际上跟上一节的情况0和1就是一样的了，所以不需要过多讨论。</p>
<h4
id="如果ab间距有些为奇数有些为偶数">如果AB间距有些为奇数，有些为偶数</h4>
<p>作为先手，我可以选择任意个牛移动，那我只需移动间隔为奇数的<span
class="math inline">\(AB\)</span>​对，那么，场上的间隔又变成了全为偶数，情况又转变成了先手必胜态。所以这样是先手必胜。</p>
<p>综上，当存在任意一对奇数间距时，先手必胜。</p>
<h3 id="有无限拉扯的情况吗">有无限拉扯的情况吗？</h3>
<p>题目说有这种情况，但是仔细思考一下，真的存在这种情况吗？</p>
<p>实际上，就如同刚才说的，对于一对<span
class="math inline">\(AB\)</span>来说，只有两种选择，一是往对方方向跑，二是往反方向跑。而这两种情况都是有限步数的，所以实际上，在两方都是最优选择的情况下，不可能出现无限拉扯的情况。</p>
<p>以此结论，我们得以计算出最后的答案。</p>
<h3 id="答案的计算">答案的计算</h3>
<p>上面总结了，当存在任意一对奇数间距时，先手必胜。但是这样显然是不好用组合数计算的。所以我们可以考虑反向计数，即总方案数-全部间距都是偶数的方案数。</p>
<p>总方案数显然为<span
class="math inline">\(\binom{l}{2n}\)</span>，而全部都是偶数的方法，可以使用隔板法计算，计算结果为
<span class="math display">\[
subans=\sum_{i=0}^{\lfloor{\frac
{l-2n}2}\rfloor}\binom{n+i-1}{n-1}\binom{n +{\lfloor{\frac
{l-2n}2}\rfloor}-2i}{n}
\]</span> 最终答案为 <span class="math display">\[
\binom{l}{2n}-subans
\]</span></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 915 Div 2</title>
    <url>/1225868749/</url>
    <content><![CDATA[<h2 id="a.-constructive-problems">A. Constructive Problems</h2>
<p>赛事通过观察法可得出答案就是<span class="math inline">\(\max(n,
m)\)</span>（bushi</p>
<p>可以发现，每一行每一列都至少得有一个，所以得证。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Constructive Problems</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 915 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1905/problem/A</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">max</span>(n, m) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-begginers-zelda">B. Begginer's Zelda</h2>
<p>一开始想复杂了，总想着从直径考虑。其实没有这么复杂。</p>
<p>观察每次操作，可以发现，最优操作下，每次操作必定会少两个原图的叶子节点（最后一次可能只少1个）。所以只需判断叶子的数量<span
class="math inline">\(cnt\)</span>,答案即为 <span
class="math display">\[
\lceil \frac {cnt}2 \rceil = \frac{cnt + 1} 2
\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Begginer&#x27;s Zelda</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 915 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1905/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">int</span> in[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		in[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		in[x]++;</span><br><span class="line">		in[y]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cnt += (in[i] == <span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; (cnt + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-largest-subsequence">C. Largest Subsequence</h2>
<p>手玩几组样例可以发现，所有能进行的有效操作，等效于将一个字典序最大的不上升子序列给排序。</p>
<p>并且，这样操作完后，最大的那个字母一定在最后一个位置。也就是说，接下来的操作都是无效的。</p>
<p>所以能够发现，一个字符串能够用这种操作排序，当且仅当将串中这个字典序最大的不上升子序列取出排序、再插入回原序列中后，这个字符串有序。</p>
<p>模拟这个过程，<span
class="math inline">\(O(n)\)</span>即可完成。其步数为这个子序列的长度-1。</p>
<p>注意特判子序列中最大的那个字符有多个的情况，此时的答案为<span
class="math inline">\(m-cnt\)</span>，其中<span
class="math inline">\(m\)</span>为子序列长度，<span
class="math inline">\(cnt\)</span>为最大字符的个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Largest Subsequence</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 915 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1905/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	vec.<span class="built_in">reserve</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (!vec.<span class="built_in">empty</span>() &amp;&amp; s[i] &gt; s[*(vec.<span class="built_in">rbegin</span>())])</span><br><span class="line">			vec.<span class="built_in">pop_back</span>();</span><br><span class="line">		<span class="keyword">if</span> (vec.<span class="built_in">empty</span>() || s[i] &lt;= s[*(vec.<span class="built_in">rbegin</span>())])</span><br><span class="line">			vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> m = vec.<span class="built_in">size</span>(), ans = m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">		<span class="keyword">if</span> (s[vec[i]] == s[vec[i - <span class="number">1</span>]])</span><br><span class="line">			ans--;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++)</span><br><span class="line">		<span class="built_in">swap</span>(s[vec[i]], s[vec[m - i - <span class="number">1</span>]]);</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">is_sorted</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()))</span><br><span class="line">		cout &lt;&lt; ans - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-cyclic-mex">D. Cyclic MEX</h2>
<p>让我们观察一下如何从原序列的答案推到循环左移一步的每一位的<span
class="math inline">\(mex_i\)</span>（<span
class="math inline">\(mex_i\)</span>定义为<span
class="math inline">\(mex\{a_1,a_2,a_3,\dots a_i\}\)</span>。</p>
<p>假设原序列的第一个数是<span
class="math inline">\(x\)</span>，左移一步，则对于之后<span
class="math inline">\(mex_i\)</span>来说：</p>
<ol type="1">
<li><span class="math inline">\(mex_i\leq
x\)</span>​，很明显不受影响。</li>
<li><span
class="math inline">\(mex_i&gt;x\)</span>，可以发现由于前面缺少了<span
class="math inline">\(x\)</span>，<span
class="math inline">\(mex_i\)</span>就变成了<span
class="math inline">\(x\)</span>​。</li>
<li>对于最后一位，由于是排列，所以显然有<span
class="math inline">\(mex_n=n\)</span>。</li>
</ol>
<p>显然，由于<span
class="math inline">\(mex_i\)</span>单调不降，我们可以用一个<code>deque</code>模拟这个过程。</p>
<p>每次将<span
class="math inline">\(x\)</span>​从队头取出，从队尾开始将<span
class="math inline">\(mex_i&gt;x\)</span>的更新成<span
class="math inline">\(x\)</span>，然后再在队尾加入一个<span
class="math inline">\(n\)</span>即可。</p>
<p>很容易发现，每个元素都可能被更改多次，时间复杂度得不到保证。</p>
<p>但是，我们更改值的操作，只是把队尾<span
class="math inline">\(mex_i\)</span>的值给改成一个相同的数<span
class="math inline">\(x\)</span>，那么，我们可以让每个队列元素多记录一个值<span
class="math inline">\(cnt\)</span>，将这些<span
class="math inline">\(x\)</span>给压成一个元素。这样就能够大幅缩减复杂度。（应该是<span
class="math inline">\(O(n)\)</span>？但是不会证QAQ）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Cyclic MEX</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 915 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1905/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line">pll q[N * <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> minn[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	minn[n + <span class="number">1</span>] = n;</span><br><span class="line">	ll sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		minn[i] = <span class="built_in">min</span>(minn[i + <span class="number">1</span>], a[i]);</span><br><span class="line">	<span class="type">int</span> l = N, r = N;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += minn[i + <span class="number">1</span>];</span><br><span class="line">		q[r++] = &#123;minn[i + <span class="number">1</span>], <span class="number">1</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = sum;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> now = a[i], pos = r - <span class="number">1</span>;</span><br><span class="line">		sum -= q[l].first;</span><br><span class="line">		<span class="keyword">if</span> (--q[l].second == <span class="number">0</span>)</span><br><span class="line">			l++;</span><br><span class="line">		ll cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (pos &gt;= l &amp;&amp; q[pos].first &gt;= now)</span><br><span class="line">		&#123;</span><br><span class="line">			sum -= q[pos].first * q[pos].second;</span><br><span class="line">			sum += now * q[pos].second;</span><br><span class="line">			cnt += q[pos].second;</span><br><span class="line">			r--, pos--;</span><br><span class="line">		&#125;</span><br><span class="line">		q[r++] = &#123;now, cnt&#125;;</span><br><span class="line">		q[r++] = &#123;n, <span class="number">1</span>&#125;;</span><br><span class="line">		sum += n;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 917 (Div. 2)</title>
    <url>/1690342032/</url>
    <content><![CDATA[<h2 id="a题">A题</h2>
<h2 id="a---least-product">A - <a
href="https://codeforces.com/contest/1917/problem/A">Least
Product</a></h2>
<p>没有0的情况下，更改数字不改变正负性。若是正数，就将其归零；若是负数，则不做处理。注意特判原数有0的情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	ll maxn = <span class="number">0</span>;</span><br><span class="line">	<span class="type">bool</span> rev = <span class="number">0</span>, suc = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">			rev = !rev;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			suc = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (suc == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (rev)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;1\n1 0\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---erase-first-or-second-letter">B - <a
href="https://codeforces.com/contest/1917/problem/B">Erase First or
Second Letter</a></h2>
<p>注意到只删第1、2个数字，后缀是不变的，则枚举每个数作为第二个数的情况，显然，贡献取决于从开头到自己有多少种不同的字母。开个桶记录一下即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	s = <span class="string">&#x27; &#x27;</span> + s;</span><br><span class="line">	ll sum = <span class="number">0</span>, lst = <span class="number">0</span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">but</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!but[s[i] - <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">			lst++;</span><br><span class="line">		sum += lst;</span><br><span class="line">		but[s[i] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---watering-an-array">C - <a
href="https://codeforces.com/contest/1917/problem/C">Watering an
Array</a></h2>
<p>显然，对于纯0数列，由于只加前缀，只会创造出一个递减的序列，意味着无论加多少次，答案贡献最多为1。所以，最优操作是每加一次立即清零计算贡献。总贡献即<span
class="math inline">\(\lfloor\frac{总轮数}{2}\rfloor\)</span>。</p>
<p>对于不为0的部分，显然，加的次数不可能超过<span
class="math inline">\(2\times n\)</span>次，直接模拟即可，复杂度<span
class="math inline">\(\Theta(n^2)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line">ll n, m, k, q;</span><br><span class="line">ll d;</span><br><span class="line"><span class="type">int</span> a[N], v[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k &gt;&gt; d;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">		cin &gt;&gt; v[i];</span><br><span class="line">	ll origin_cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		origin_cnt += a[i] == i;</span><br><span class="line">	ll ans = ((d - <span class="number">1ll</span>) / <span class="number">2ll</span>) + origin_cnt;</span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="built_in">min</span>(<span class="built_in">max</span>(<span class="number">2ll</span> * n, <span class="number">2ll</span> * k), d - <span class="number">1</span>); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> id = (i + k - <span class="number">1</span>) % k + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= v[id]; i++)</span><br><span class="line">			a[i]++;</span><br><span class="line">		ll cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (a[i] == i)</span><br><span class="line">				cnt++;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, cnt + (d - i - <span class="number">1ll</span>) / <span class="number">2ll</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e---construct-matrix">E - <a
href="https://codeforces.com/contest/1917/problem/E">Construct
Matrix</a></h2>
<p>可以分为几种可能进行讨论。</p>
<h3 id="一k-mod-2-1">一、<span class="math inline">\(k\ mod\ 2 =
1\)</span></h3>
<p>显然无解。</p>
<h3 id="二k-mod-4-0">二、<span class="math inline">\(k\ mod\ 4 =
0\)</span></h3>
<p>显然，只需要用<span class="math display">\[2\times
2\]</span>的单元块填充整个区域即可。</p>
<h3 id="三k-mod-4-2-且6leq-k-leq-n-times-n--10">三、<span
class="math inline">\(k\ mod\ 4 = 2 且6\leq k \leq n \times n
-10\)</span></h3>
<p>考虑这样摆放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OO..</span><br><span class="line">O.O.</span><br><span class="line">.OO.</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>O代表填充为1，显然，这样满足题目条件。在剩下的地方填充<span
class="math inline">\(2\times2\)</span>单元块即可。</p>
<h3 id="四kntimes-n-6">四、<span class="math inline">\(k=n\times
n-6\)</span></h3>
<p>考虑继续塞满上面那个模型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OO..</span><br><span class="line">O.O.</span><br><span class="line">OOOO</span><br><span class="line">O..O</span><br></pre></td></tr></table></figure>
<p>这样同样满足要求，其他地方填充<span class="math inline">\(2\times
2\)</span>即可。</p>
<h3 id="五-特判n2且k2">五、 特判<span
class="math inline">\(n=2且k=2\)</span></h3>
<p>这种情况下，不符合上述情况，但显然有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O.</span><br><span class="line">.O</span><br></pre></td></tr></table></figure>
<p>满足需求，特判即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1001</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">switcher</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (k != <span class="number">0</span> &amp;&amp; (n * n &lt; k))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (k % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (k % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; <span class="number">6</span> &lt;= k &amp;&amp; k &lt;= n * n - <span class="number">10</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (k == n * n - <span class="number">6</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span> &amp;&amp; k == <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="type">int</span> condition = switcher(n, k);</span><br><span class="line">	<span class="keyword">switch</span> (condition)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			a[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">			a[<span class="number">1</span>][<span class="number">2</span>] = a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; k; i += <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n &amp;&amp; k; j += <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					a[i][j] = a[i + <span class="number">1</span>][j] = a[i][j + <span class="number">1</span>] = a[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">					k -= <span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">			k -= <span class="number">6</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; k; i += <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n &amp;&amp; k; j += <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (i &lt;= <span class="number">3</span> &amp;&amp; j &lt;= <span class="number">3</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					a[i][j] = a[i + <span class="number">1</span>][j] = a[i][j + <span class="number">1</span>] = a[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">					k -= <span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			a[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">2</span>] = a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			a[<span class="number">3</span>][<span class="number">2</span>] = a[<span class="number">2</span>][<span class="number">3</span>] = a[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">			k -= <span class="number">10</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n &amp;&amp; k; i += <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n &amp;&amp; k; j += <span class="number">2</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (i &lt;= <span class="number">3</span> &amp;&amp; j &lt;= <span class="number">3</span>)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					a[i][j] = a[i + <span class="number">1</span>][j] = a[i][j + <span class="number">1</span>] = a[i + <span class="number">1</span>][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">					k -= <span class="number">4</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			a[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">2</span>] = a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			a[<span class="number">3</span>][<span class="number">2</span>] = a[<span class="number">2</span>][<span class="number">3</span>] = a[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">			a[<span class="number">4</span>][<span class="number">4</span>] = a[<span class="number">3</span>][<span class="number">4</span>] = a[<span class="number">3</span>][<span class="number">1</span>] = a[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!condition)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; \n&quot;</span>[j == n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 919 Div 2</title>
    <url>/2393976761/</url>
    <content><![CDATA[<h2 id="a---satisfying-constraints">A - <a
href="https://codeforces.com/contest/1920/problem/A">Satisfying
Constraints</a></h2>
<p>每次动态更新上下界，最后二分判断一下界内的被删除数字即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	ll l = <span class="number">0</span>, r = <span class="number">1e10</span>, x;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, op; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">		<span class="keyword">switch</span> (op)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				l = <span class="built_in">max</span>(x, l);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				r = <span class="built_in">min</span>(x, r);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			&#123;</span><br><span class="line">				vec.<span class="built_in">push_back</span>(x);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (l &gt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">unique</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">auto</span> it1 = <span class="built_in">lower_bound</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), l);</span><br><span class="line">	<span class="keyword">auto</span> it2 = --<span class="built_in">upper_bound</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), r);</span><br><span class="line">	<span class="keyword">if</span> (it2 - it1 &lt; <span class="number">0</span> || (*it1) &lt; l || (*it2) &gt; r)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; r - l + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; r - l + <span class="number">1ll</span> - (ll)(it2 - it1 + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---summation-game">B - <a
href="https://codeforces.com/contest/1920/problem/B">Summation
Game</a></h2>
<p>对后手而言，显然把最大的<span
class="math inline">\(x\)</span>个数取反了是最优的。所以作为先手，我们枚举去掉最大的<span
class="math inline">\(1\dots
k\)</span>个数，最终结果是多少，排序+前缀和即可，注意判断边界。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, k, x;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	ll val = <span class="number">-1e10</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (n == k)</span><br><span class="line">		val = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n - i &lt; <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		val = <span class="built_in">max</span>(val, <span class="number">2ll</span> * a[<span class="built_in">max</span>(<span class="number">0</span>, n - i - x)] - a[n - i]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---partitioning-the-array">C - <a
href="https://codeforces.com/contest/1920/problem/C">Partitioning the
Array</a></h2>
<p>题意可知，对于每个整除n的<span
class="math inline">\(k\)</span>，每一个下标组 <span
class="math display">\[
\begin{gather}
\{1,1+k,1+2k\dots 1+(\frac n k -1)k\},    \\\\
\{2,2+k,2+2k\dots 2+(\frac n k -1)k\},    \\\\
\dots     \\\\
\{k,2k\dots n\}
\end{gather}
\]</span> 组内的元素对某个数<span
class="math inline">\(m\)</span>同余。</p>
<p>观察题目可以发现，我们实际上并不关心<span
class="math inline">\(m\)</span>是多少，只需知道存不存在这样的<span
class="math inline">\(m\)</span>。</p>
<p>对于这样一个式子: <span class="math display">\[
\begin{align}
    a \equiv b\pmod M    \\\\
    b \equiv c\pmod M    \\\\
\end{align}
\]</span> 移项得： <span class="math display">\[
\begin{align}
    a-b \equiv 0\pmod M    \\\\
    b-c \equiv 0\pmod M    \\\\
\end{align}
\]</span> 等效于： <span class="math display">\[
gcd(a -b,b-c) \not= 1
\]</span></p>
<p>可知，若一组数存在这样一个<span
class="math inline">\(M\)</span>，那么其相邻数的差的<span
class="math inline">\(gcd\)</span>一定不为1。</p>
<p>枚举每个<span
class="math inline">\(k\)</span>，然后将每组下标提取出来，判断即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">auto</span> calc = [&amp;](<span class="type">int</span> k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> val = <span class="number">0</span>; <span class="comment">// __gcd(0, val) = val</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> pos = i; pos &lt;= n; pos += k)</span><br><span class="line">				b.<span class="built_in">push_back</span>(a[pos]);</span><br><span class="line">			<span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; b.<span class="built_in">size</span>(); i++)</span><br><span class="line">				val = __gcd(val, b[i] - b[i - <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> val != <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k * k &lt;= n; k++)</span><br><span class="line">		<span class="keyword">if</span> (n % k == <span class="number">0</span>)</span><br><span class="line">			ans += <span class="built_in">calc</span>(k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = n; (n / k) * (n / k) &lt; n; k--)</span><br><span class="line">		<span class="keyword">if</span> (n % k == <span class="number">0</span>)</span><br><span class="line">			ans += <span class="built_in">calc</span>(k);</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d---array-repetition">D - <a
href="https://codeforces.com/contest/1920/problem/D">Array
Repetition</a></h2>
<p>查询的下标很大(1e18)，不可能构造出实际数列，考虑其他做法。</p>
<p>每次1操作只会在末尾加上一个新数字，说明有效数字较少，长度的增加主要来自于2操作的增倍。</p>
<p>先模拟生成数列的过程，记录下操作到当前步骤时的<strong>数列长度</strong>以及<strong>增加数字</strong>（操作1）或<strong>复制次数</strong>（操作2），按照数列长度排序。</p>
<p>若现在要查询下标<span
class="math inline">\(pos\)</span>，二分找到比<span
class="math inline">\(pos\)</span>大的最小长度对应的操作。</p>
<p>若是操作1，则增加的数字显然就是<span
class="math inline">\(pos\)</span>对应的数值。</p>
<p>若是操作2，设增倍后，长度变为<span
class="math inline">\(X\)</span>倍（题目中是复制<span
class="math inline">\(x\)</span>次，即有<span
class="math inline">\(X=x+1\)</span>），长度为<span
class="math inline">\(L\)</span>，则等效于在查找<span
class="math inline">\((pos+ 1)\bmod X -1\)</span>下标的数字。</p>
<p>容易发现，每经过这样一次取模操作，数据规模都减小至少一半，即单次复杂度小于<span
class="math inline">\(log_{2}^2Q_i\)</span>，总复杂度为<span
class="math inline">\(\Theta(Qlog_2^2{(q_{max})})\)</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;__int128, __int128&gt; p128;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> opt;</span><br><span class="line">	__int128 pos, x;</span><br><span class="line">	<span class="built_in">Node</span>(<span class="type">int</span> a, __int128 b, __int128 c) : <span class="built_in">opt</span>(a), <span class="built_in">pos</span>(b), <span class="built_in">x</span>(c) &#123;&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node b)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> pos &lt; b.pos;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N], cnt;</span><br><span class="line">vector&lt;Node&gt; vec;</span><br><span class="line">map&lt;__int128, <span class="type">int</span>&gt; f;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(__int128 pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (f.<span class="built_in">find</span>(pos) != f.<span class="built_in">end</span>())</span><br><span class="line">		<span class="keyword">return</span> f[pos];</span><br><span class="line">	<span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">Node</span>(<span class="number">0</span>, pos, <span class="number">0</span>));</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;TEST :  OPT = &quot; &lt;&lt; it-&gt;opt &lt;&lt; &quot;, POS = &quot; &lt;&lt; (ll)(it-&gt;pos) &lt;&lt; endl; </span></span><br><span class="line">	<span class="keyword">if</span> (it-&gt;opt == <span class="number">1</span> &amp;&amp; it-&gt;pos == pos)</span><br><span class="line">		<span class="keyword">return</span> a[it-&gt;x];</span><br><span class="line">	__int128 new_pos = (__int128)((pos - <span class="number">1</span>) % it-&gt;x + <span class="number">1ll</span>);</span><br><span class="line">	<span class="keyword">return</span> f[pos] = <span class="built_in">search</span>(new_pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	__int128 len = <span class="number">0</span>;</span><br><span class="line">	vec.<span class="built_in">clear</span>();</span><br><span class="line">	f.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, opt; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll x;</span><br><span class="line">		cin &gt;&gt; opt &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (len &gt; (__int128)(<span class="number">1e18</span>))</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			len++;</span><br><span class="line">			vec.<span class="built_in">push_back</span>(<span class="built_in">Node</span>(opt, len, ++cnt));</span><br><span class="line">			a[cnt] = x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			__int128 bk = len;</span><br><span class="line">			len *= (x + <span class="number">1ll</span>);</span><br><span class="line">			vec.<span class="built_in">push_back</span>(<span class="built_in">Node</span>(opt, len, bk));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//cout &lt;&lt; (ll)(len) &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">	ll x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">search</span>(x) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; flush;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e---counting-binary-strings">E - <a
href="https://codeforces.com/contest/1920/problem/E">Counting Binary
Strings</a></h2>
<p>考虑dp。</p>
<p>设计状态<code>dp[i][j]</code>表示在有<span
class="math inline">\(i\)</span>个仅含1个1的子串、最后一个1前有<span
class="math inline">\(j\)</span>个0、以1结尾的字符串个数。</p>
<p>状态确定后，大致的转移方程也可以很快写出来： <span
class="math display">\[
dp[i][j] = \sum{dp[i-cnt][k]} \\
\]</span>
其中，<code>cnt</code>表示从上一个状态转移到下一个状态后，增加了多少个符合要求的子串。</p>
<p>接下来考虑如何计算<code>cnt</code>以及判断边界。</p>
<p>考虑这样的串： <span class="math display">\[
\underbrace{0,0\dots 0}_{k个0},1
\]</span> 当在后面加上<span
class="math inline">\(j\)</span>个0、1个1后： <span
class="math display">\[
\underbrace{0,0 \dots 0}_{k个0},1,\underbrace{0,0 \dots 0}_{j个0},1
\]</span> 增加的满足要求子串分为四部分：</p>
<p>一部分是前面的1到后面的0构成的子串，有<span
class="math inline">\(j\)</span>个；</p>
<p>第二部分是前面的<span
class="math inline">\(k\)</span>个0到后面的<span
class="math inline">\(j\)</span>个0构成的子串，有<span
class="math inline">\(j*k\)</span>个；</p>
<p>第三部分是后面<span
class="math inline">\(j\)</span>个0与后面的1构成的子串，有<span
class="math inline">\(j\)</span>个；</p>
<p>最后一部分是增加的1本身，有1个。</p>
<p>所以， <span class="math display">\[
\begin{align}
    cnt &amp; =j+j+j*k+1 \\\\
        &amp; =j*(k+2)+1 \\\\
\end{align}
\]</span></p>
<p>然后考虑边界条件。</p>
<p>最大长度不能超过<span
class="math inline">\(lim\)</span>（即输入中的k），所以有 <span
class="math display">\[
j+k+1 \leq lim
\]</span> 增加的子串数量显然不能超过当前状态的子串数量，有 <span
class="math display">\[
cnt\leq i
\]</span> 这样就完成了主要部分的转移方程。</p>
<p>但是，可以发现，开头部分的转移并没有1在最前面，因此需要特判；结尾部分也要处理结尾不为0的部分，统计答案的时候也要单独处理，详细的可以看代码理解。</p>
<p>时间复杂度不会分析，反正是<span
class="math inline">\(\Theta(能过)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q, lim;</span><br><span class="line">ll f[<span class="number">2510</span>][<span class="number">2510</span>];</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">998244353ll</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; lim;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">			f[i][j] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++) <span class="comment">// j个0在开头</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (j + <span class="number">1</span> &gt; lim)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		f[j + <span class="number">1</span>][j] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; lim; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j &gt; i)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= i; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (j + k + <span class="number">1</span> &gt; lim)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="type">int</span> cnt = j * k + <span class="number">2</span> * j + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (i &lt; cnt)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				f[i][j] =  (f[i][j] + f[i - cnt][k]) % mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> DEBUG = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (DEBUG)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;   &quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot;| &quot;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">				cout &lt;&lt; f[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++) <span class="comment">// 添加j个0在末尾</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= n; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> cnt = j * k + j;</span><br><span class="line">			<span class="keyword">if</span> (j + k + <span class="number">1</span> &gt; lim)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (n &lt;= cnt)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			ans = (ans + f[n - cnt][k]) % mod;</span><br><span class="line">			<span class="keyword">if</span> (DEBUG &amp;&amp; f[n - cnt][k] != <span class="number">0</span>)</span><br><span class="line">				cout &lt;&lt; j &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; k  &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n - cnt &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; f[n - cnt][k] &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f1---smooth-sailing-easy-version">F1 - <a
href="https://codeforces.com/contest/1920/problem/F1">Smooth Sailing
(Easy Version)</a></h2>
<p>要求求路径到火山最小距离的最大值，似乎可以二分？</p>
<p>于是考虑二分到火山距离的最小值<span
class="math inline">\(x\)</span>。然后，我们直接从<span
class="math inline">\((x,y)\)</span>出发，暴力<span
class="math inline">\(\text{BFS}\)</span>把所有离火山距离$ x<span
class="math inline">\(的**四联通**点全部染上，点到火山的距离可以用类似\)</span><span
class="math inline">\(的做法在\)</span>n<sup>2<span
class="math inline">\(的时间内预处理出来。然后，再暴力从火山出发**八联通扩展**，看能否从火山扩展到边界。这样就能够非常暴力地完成这题。时间复杂度\)</span>(qn</sup>2log_2n)$，显然能通过此题。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: F1. Smooth Sailing (Easy Version)</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 919 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1920/problem/F1</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 5000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">	vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">a</span>(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">2</span>));</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; ch;</span><br><span class="line">			<span class="keyword">switch</span> (ch)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">					a[i][j] = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">					a[i][j] = <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">					a[i][j] = <span class="number">2</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">f</span>(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">2</span>, inf));</span><br><span class="line">	<span class="comment">// 离(i,j)最近的火山距离</span></span><br><span class="line">	<span class="keyword">auto</span> process = [&amp;]()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">define</span> min(x,y,z) min(x, min(y, z))</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] == <span class="number">2</span>)</span><br><span class="line">					f[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] == <span class="number">2</span>)</span><br><span class="line">					f[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j] = <span class="built_in">min</span>(f[i][j], f[i + <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] == <span class="number">2</span>)</span><br><span class="line">					f[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] == <span class="number">2</span>)</span><br><span class="line">					f[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j] = <span class="built_in">min</span>(f[i][j], f[i + <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j + <span class="number">1</span>] + <span class="number">1</span>);	</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">process</span>();</span><br><span class="line">	<span class="built_in">process</span>();</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> __DEBUG__  false</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> lim, pii pos)</span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">b</span>(n + <span class="number">2</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">2</span>, <span class="number">0</span>));</span><br><span class="line">		queue&lt;pii&gt; q1;</span><br><span class="line">		q1.<span class="built_in">push</span>(pos);</span><br><span class="line">		<span class="type">const</span> pii dir[] = &#123;<span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">0</span>), <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">						   <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>)&#125;;</span><br><span class="line">						   	</span><br><span class="line">		b[pos.first][pos.second] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (!q1.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span> [x, y] = q1.<span class="built_in">front</span>();</span><br><span class="line">			q1.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [dx, dy] : dir)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x + dx &lt; <span class="number">1</span> || x + dx &gt; n || y + dy &lt; <span class="number">1</span> || y + dy &gt; m)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span> (f[x + dx][y + dy] &gt;= lim &amp;&amp; !b[x + dx][y + dy] &amp;&amp; a[x + dx][y + dy] == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					b[x + dx][y + dy] = <span class="number">1</span>;</span><br><span class="line">					q1.<span class="built_in">push</span>(&#123;x + dx, y + dy&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (__DEBUG__)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">					cout &lt;&lt; b[i][j] &lt;&lt; <span class="string">&quot; \n&quot;</span>[j == m];</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;		</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		queue&lt;pii&gt; q;</span><br><span class="line">		<span class="type">const</span> pii dirs[] = &#123;<span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">0</span>), <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">						   <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">						   <span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">1</span>), </span><br><span class="line">						   <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">-1</span>), <span class="built_in">make_pair</span>(<span class="number">-1</span>, <span class="number">1</span>)&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="keyword">if</span> (a[i][j] == <span class="number">1</span>)</span><br><span class="line">					q.<span class="built_in">push</span>(&#123;i, j&#125;);</span><br><span class="line">		<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span> [x, y] = q.<span class="built_in">front</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="number">1</span> || x == n || y == <span class="number">1</span> || y == m)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [dx, dy] : dirs)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (b[x + dx][y + dy] == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					b[x + dx][y + dy] = <span class="number">2</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(&#123;x + dx, y + dy&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="type">int</span> l = <span class="number">0</span>, r = f[x][y], mid, ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">		&#123;</span><br><span class="line">			mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">check</span>(mid, &#123;x, y&#125;))</span><br><span class="line">			&#123;</span><br><span class="line">				l = mid + <span class="number">1</span>;</span><br><span class="line">				ans = mid;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				r =  mid - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 920 Div 3</title>
    <url>/3802225951/</url>
    <content><![CDATA[<h2 id="a---square">A - Square</h2>
<p>直接记录最左最右、最上最下即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Square</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/A</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x, y;</span><br><span class="line">	ll now1 = llinf, now2 = llinf, len1, len2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (now1 == llinf)</span><br><span class="line">			now1 = x;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (now1 != x)</span><br><span class="line">			len1 = <span class="built_in">abs</span>(now1 - x);</span><br><span class="line">		<span class="keyword">if</span> (now2 == llinf)</span><br><span class="line">			now2 = y;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (now2 != y)</span><br><span class="line">			len2 = <span class="built_in">abs</span>(now2 - y);	</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; len1 * len2 &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---arranging-cats">B - Arranging Cats</h2>
<p>先算需要转换多少个0/1使得1的数量相等，转化完剩下的不同数对个数除以2即为接下来需要移动的最小次数。二者相加得到答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Arranging Cats</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		a[i] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		cnt1 += a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		b[i] = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		cnt2 += b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> dif1 = <span class="number">0</span>, dif2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span> &amp;&amp; b[i] == <span class="number">1</span>)</span><br><span class="line">			dif1++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i] == <span class="number">1</span> &amp;&amp; b[i] == <span class="number">0</span>)</span><br><span class="line">			dif2++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt1 &lt; cnt2)</span><br><span class="line">		dif1 = <span class="built_in">max</span>(<span class="number">0</span>, dif1 - (cnt2 - cnt1));</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		dif2 = <span class="built_in">max</span>(<span class="number">0</span>, dif2 - (cnt1 - cnt2));</span><br><span class="line">	cout &lt;&lt; (dif1 + dif2) / <span class="number">2</span> + (<span class="built_in">abs</span>(cnt1 - cnt2)) &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---sending-messages">C - Sending Messages</h2>
<p>简单dp。</p>
<p>设<code>dp[i]</code>表示发出第i条信息后的最小耗电量。容易发现，转移到下一个状态，只有两个状态：</p>
<ol type="1">
<li>发完上一条马上关机，下一次再开机；</li>
<li>发完上一条不关机。</li>
</ol>
<p>即得方程： <span class="math display">\[
dp[i] = dp[i - 1] + min(b, (t[i] - t[i - 1]) * a);
\]</span></p>
<p>注意在0时手机就已经开机，初始代价为a而不是0。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Sending Messages</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line">ll n, f, a, b;</span><br><span class="line">ll t[N];</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; f &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; t[i];</span><br><span class="line">	<span class="built_in">sort</span>(t + <span class="number">1</span>, t + n + <span class="number">1</span>);</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dp[i] = dp[i - <span class="number">1</span>] + <span class="built_in">min</span>(b, (t[i] - t[i - <span class="number">1</span>]) * a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt;  min(dp[n][0], dp[n][1]) &lt;&lt; endl;</span></span><br><span class="line">	cout &lt;&lt; (f &gt;= dp[n] ? <span class="string">&quot;YES\n&quot;</span> : <span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d---very-different-array">D - Very Different Array</h2>
<p><em>本题没有严格证明（全靠乱搞</em></p>
<p>凭直觉可以发现，最优解的序列应当是令<span
class="math inline">\(a\)</span>升序，选中的<span
class="math inline">\(b\)</span>降序，二者构成<span
class="math inline">\(X\)</span>型或八字型的趋势。</p>
<p>又可以发现，对于这种趋势的数列对来说，中间的部分贡献较少，两边的贡献较大，因此可以得出一个一点都不严谨的结论：<strong>在选择b序列中的数时，我们总是选择较大的那一批和较小的那一批，舍弃掉中间的部分</strong>。</p>
<p>根据这个结论，可以搞出一个乱搞方法：</p>
<ol type="1">
<li>将a按从小到大排序，b按从大到小排序；</li>
<li>将b前n个数与a对应位置的差处理出前缀和<code>s1</code>；</li>
<li>将b后n个数与a末尾对应位置的差处理出前缀和<code>s2</code>；</li>
<li>然后直接计算<code>s1[i]+s2[n-i+1]</code>的最大值。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Very Different Array</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		cin &gt;&gt; b[i];</span><br><span class="line">	<span class="keyword">auto</span> calc = [&amp;]()</span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt;ll&gt; <span class="built_in">s1</span>(n + <span class="number">1</span>), <span class="built_in">s2</span>(n + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			s1[i] = s1[i - <span class="number">1</span>] + <span class="built_in">abs</span>(a[i] - b[i]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			s2[i] = s2[i - <span class="number">1</span>] + <span class="built_in">abs</span>(a[n - i + <span class="number">1</span>] - b[m - i + <span class="number">1</span>]);</span><br><span class="line">		ll ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			ans = <span class="built_in">max</span>(ans, <span class="built_in">abs</span>(s1[i] + s2[n - i]));</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	ll ans = <span class="built_in">calc</span>();</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e---eat-the-chip">E - Eat the Chip</h2>
<p>可以发现，无论如何，每进行一步，两人的x坐标相对距离就-1。所以，只要判断x相对距离的奇偶性就能确定谁必定赢不了。</p>
<p>然后是确定不输的那方能否必胜。</p>
<p>先不讨论边界，若确定自己赢不了，这一方要做的显然是“逃离”另一方，不让它碰到自己。</p>
<p>而后手不输的情况下，两人行走步数相同，所以只有两人y坐标相等时才能必胜。</p>
<p>先手不输的情况下，先手比后手多走一步，所以两人y坐标相差1以内时先手必胜。</p>
<p>接下来讨论边界。容易发现，边界只会影响“逃跑者”的路径选择，所以加上一点小判断就可以了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E. Eat the Chip</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/E</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m, x1, y1, x2, y2;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">	<span class="type">int</span> round = x2 - x1;</span><br><span class="line">	<span class="keyword">if</span> (round &lt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Draw\n&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> width = y1 - y2;</span><br><span class="line">	<span class="keyword">if</span> (round % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">// Bob or Draw</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (width == <span class="number">0</span>)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (width &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(width) &lt;= round / <span class="number">2</span> - (m - y1))</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (width &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(width) &lt;= round / <span class="number">2</span> - (y1 - <span class="number">1</span>))</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Bob\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Draw\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="comment">// Alice or Draw</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(width) &lt;= <span class="number">1</span>)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (width &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(width) &lt;= round / <span class="number">2</span> - (m - y2) + <span class="number">1</span>)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (width &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">abs</span>(width) &lt;= round / <span class="number">2</span> - (y2 - <span class="number">1</span>) + <span class="number">1</span>)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Alice\n&quot;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Draw\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f---sum-of-progression">F - Sum of Progression</h2>
<p>看数据范围<span class="math inline">\(n \leq
1e5\)</span>，可以发现是经典的分块范围（大雾</p>
<p>将每个询问分为两种：</p>
<p>一种是步长d大于<span class="math inline">\(\sqrt
n\)</span>的，显然最多跳不超过<span class="math inline">\(\sqrt
n\)</span>次，直接暴力计算即可。</p>
<p>另一种是小于<span class="math inline">\(\sqrt
n\)</span>的，我们暴力预处理出来几个数组<code>sum[i][step],f[i][step],stp[i][step]</code>。</p>
<p><code>sum[i][step]</code>:以i为结尾、最开头是st、step为步长的数列的前缀和，即<code>a[st] + a[st + d] + ... + a[i]</code>。</p>
<p><code>f[i][step]</code>：以i为结尾、最开头是st、step为步长的数列，每个数乘上对应系数的和，即<code>1 * a[st] + 2 * a[st + d] + ... + k * a[i]</code>。</p>
<p><code>stp[i][step]</code>：以i为结尾、最开头是st、step为步长的数列，<code>a[i]</code>对应的系数。</p>
<p>这些数组可以很容易的在<span class="math inline">\(\Theta(n\sqrt
n)\)</span>的时间内预处理完成。</p>
<p>然后，用这些数组，就可以在询问时用<span
class="math inline">\(\Theta(1)\)</span>的时间回答出问题。具体方式可以看代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: F. Sum of Progression</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/F</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">ll a[N], f[N][<span class="number">400</span>], sum[N][<span class="number">400</span>], stp[N][<span class="number">400</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	<span class="type">int</span> lim = <span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lim; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i - j &lt; <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				stp[i][j] = <span class="number">1</span>;</span><br><span class="line">				sum[i][j] = f[i][j] = a[i];</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			sum[i][j] = sum[i - j][j] + a[i];</span><br><span class="line">			stp[i][j] = stp[i - j][j] + <span class="number">1</span>;</span><br><span class="line">			f[i][j] = f[i - j][j] + stp[i][j] * a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> s, d, k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; s &gt;&gt; d &gt;&gt; k;</span><br><span class="line">		<span class="keyword">if</span> (d &gt; lim)</span><br><span class="line">		&#123;</span><br><span class="line">			ll ans = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (ll p = s, j = <span class="number">1</span>; j &lt;= k; j++, p += d)</span><br><span class="line">				ans += j * a[p];</span><br><span class="line">			cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> st = s, ed = s + d * (k - <span class="number">1</span>);</span><br><span class="line">			ll part1 = (f[ed][d] - (st &gt; d ? f[st - d][d] : <span class="number">0ll</span>));</span><br><span class="line">			ll part2 = (sum[ed][d] - (st &gt; d ? sum[st - d][d] : <span class="number">0ll</span>)) * (stp[st][d] - <span class="number">1ll</span>);</span><br><span class="line">			cout &lt;&lt; part1 - part2 &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> DEBUG = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (DEBUG)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;f  &quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot;| &quot;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">				cout &lt;&lt; f[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;		</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;stp&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; <span class="string">&quot;| &quot;</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">				cout &lt;&lt; stp[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="g---mischievous-shooter">G - Mischievous Shooter</h2>
<p>可以发现，本题相当于求一个特定图形内的1的个数的最大值，因此考虑前缀和维护。</p>
<p>四种不同的图形可以通过旋转矩阵合并为一种讨论，在这里以原点在左上角讨论。</p>
<p>我们维护4个前缀和：</p>
<ol type="1">
<li><code>sum_col[i][j]</code>：列前缀和，<code>a[1][j] + a[2][j] + ... + a[i][j]</code>。</li>
<li><code>sum_row[i][j]</code>：行前缀和</li>
<li><code>sum_diag[i][j]</code>：副对角前缀和，即<code>a[i][j] + a[i-1][j+1] + a[i-2][j+2]...</code></li>
<li><code>sum_f[i][j]</code>：以左上角为原点的霰弹图形内的个数。</li>
</ol>
<p>通过纸上模拟可以很容易得出从<code>[i-1][j]</code>和从<code>[i][j-1]</code>的两种递推公式。然后可以暴力求解<code>sum_f[1][1]</code>，详细的可以看代码。</p>
<p>处理时，要注意这题极其恶心的边界条件判断。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: G. Mischievous Shooter</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 920 (Div. 3)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1921/problem/G</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="type">size_t</span> rows, <span class="type">size_t</span> cols, <span class="type">const</span> T&amp; initial_value = <span class="built_in">T</span>())</span><br><span class="line">        : <span class="built_in">rows_</span>(rows), <span class="built_in">cols_</span>(cols), <span class="built_in">data_</span>(rows, std::<span class="built_in">vector</span>&lt;T&gt;(cols, initial_value)) &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载()运算符用于访问行列列</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">size_t</span> row, <span class="type">size_t</span> col)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= rows_ || col &lt; <span class="number">0</span> || col &gt;= cols_) &#123;</span><br><span class="line">            <span class="comment">//std::cerr &lt;&lt; &quot;Error: Index out of bounds\n&quot;;</span></span><br><span class="line">            <span class="comment">// 返回一个默认值</span></span><br><span class="line">            <span class="type">static</span> T default_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> default_value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data_[row][col];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获取行数和列数的函数</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">rows</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rows_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">cols</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cols_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">size_t</span> rows_;</span><br><span class="line">    <span class="type">size_t</span> cols_;</span><br><span class="line">    std::vector&lt;std::vector&lt;T&gt;&gt; data_;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="function">Matrix&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, m + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">char</span> ch;</span><br><span class="line">			cin &gt;&gt; ch;</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">				<span class="built_in">a</span>(i, j) = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> __DEBUG__ false</span></span><br><span class="line">	<span class="keyword">auto</span> autodbg = [&amp;](Matrix&lt;<span class="type">int</span>&gt; a, string msg)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (__DEBUG__)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; msg &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>)a.<span class="built_in">rows</span>(); i++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; (<span class="type">int</span>)a.<span class="built_in">cols</span>(); j++)</span><br><span class="line">					cout &lt;&lt; <span class="built_in">a</span>(i, j) &lt;&lt; (j == m ? <span class="string">&quot;\n&quot;</span> : <span class="string">&quot; &quot;</span>);</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> calc = [&amp;]()</span><br><span class="line">	&#123;</span><br><span class="line">		Matrix&lt;<span class="type">int</span>&gt; <span class="built_in">sum_diag</span>(n + <span class="number">1</span>, m + <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">				    <span class="built_in">sum_row</span>(n + <span class="number">1</span>, m + <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">				    <span class="built_in">sum_col</span>(n + <span class="number">1</span>, m + <span class="number">1</span>, <span class="number">0</span>), </span><br><span class="line">				    <span class="built_in">sum_f</span>(n + <span class="number">1</span>, m + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="comment">// Process sum</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">sum_row</span>(i, j) = <span class="built_in">sum_row</span>(i - <span class="number">1</span>, j) + <span class="built_in">a</span>(i, j);</span><br><span class="line">				<span class="built_in">sum_col</span>(i, j) = <span class="built_in">sum_col</span>(i, j - <span class="number">1</span>) + <span class="built_in">a</span>(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="built_in">sum_diag</span>(i, j) = <span class="built_in">sum_diag</span>(i - <span class="number">1</span>, j + <span class="number">1</span>) + <span class="built_in">a</span>(i, j);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((i - <span class="number">1</span>) + (j - <span class="number">1</span>) &lt;= k)</span><br><span class="line">					<span class="built_in">sum_f</span>(<span class="number">1</span>, <span class="number">1</span>) += <span class="built_in">a</span>(i, j);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> x = i + k, y = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (x &gt; n)</span><br><span class="line">			&#123;</span><br><span class="line">				y += x - n;</span><br><span class="line">				x = n;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">sum_f</span>(i, <span class="number">1</span>) = <span class="built_in">sum_f</span>(i - <span class="number">1</span>, <span class="number">1</span>) - </span><br><span class="line">						  <span class="built_in">sum_col</span>(i - <span class="number">1</span>, <span class="built_in">min</span>(m, k + <span class="number">1</span>)) + </span><br><span class="line">						  (<span class="built_in">sum_diag</span>(x, y) - <span class="built_in">sum_diag</span>(i - <span class="number">1</span>, k + <span class="number">2</span>));</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= m; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">int</span> x = i + k, y = j;</span><br><span class="line">				<span class="keyword">if</span> (x &gt; n)</span><br><span class="line">				&#123;</span><br><span class="line">					y += x - n;</span><br><span class="line">					x = n;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">sum_f</span>(i, j) = <span class="built_in">sum_f</span>(i, j - <span class="number">1</span>) - </span><br><span class="line">							  (<span class="built_in">sum_row</span>(<span class="built_in">min</span>(n, i + k), j - <span class="number">1</span>) - <span class="built_in">sum_row</span>(i - <span class="number">1</span>, j - <span class="number">1</span>)) +</span><br><span class="line">							  (<span class="built_in">sum_diag</span>(x, y) - <span class="built_in">sum_diag</span>(i - <span class="number">1</span>, j + k + <span class="number">1</span>));</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				ans = <span class="built_in">max</span>(ans, <span class="built_in">sum_f</span>(i, j));</span><br><span class="line">		<span class="built_in">autodbg</span>(a, <span class="string">&quot;This is A&quot;</span>);</span><br><span class="line">		<span class="built_in">autodbg</span>(sum_f, <span class="string">&quot;This is SUM_F&quot;</span>);</span><br><span class="line">		<span class="built_in">autodbg</span>(sum_row, <span class="string">&quot;This is SUM_ROW&quot;</span>);</span><br><span class="line">		<span class="built_in">autodbg</span>(sum_col, <span class="string">&quot;This is SUM_COL&quot;</span>);</span><br><span class="line">		<span class="built_in">autodbg</span>(sum_diag, <span class="string">&quot;This is SUM_DIAG&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> turn = [&amp;]()</span><br><span class="line">	&#123;</span><br><span class="line">		Matrix&lt;<span class="type">int</span>&gt; <span class="built_in">b</span>(m + <span class="number">1</span>, n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">				<span class="built_in">b</span>(j, i) = <span class="built_in">a</span>(i, m - j + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">swap</span>(n, m);</span><br><span class="line">		<span class="built_in">swap</span>(a, b);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans, <span class="built_in">calc</span>());</span><br><span class="line">		<span class="built_in">turn</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 921 Div 2</title>
    <url>/869361213/</url>
    <content><![CDATA[<h2 id="a---we-got-everything-covered">A - We Got Everything
Covered!</h2>
<p>很显然，最短的方案长度一定是<span class="math inline">\(n \times
k\)</span>，直接循环输出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. We Got Everything Covered!</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 921 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1925/problem/A</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	string s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			s.<span class="built_in">push_back</span>(j + <span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---a-balanced-problemset">B - A Balanced Problemset?</h2>
<p>一个显而易见的结论是，如果答案是<span
class="math inline">\(y\)</span>，那么一定有<span
class="math inline">\(x \mid y\)</span>。那么直接枚举<span
class="math inline">\(x\)</span>的因子，判断<span
class="math inline">\(\frac y x\)</span>是否大于等于<span
class="math inline">\(n\)</span>即可。时间复杂度<span
class="math inline">\(\Theta(T\sqrt x)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. A Balanced Problemset?</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 921 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1925/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; primes;</span><br><span class="line"><span class="type">bool</span> isprime[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preProcess</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">fill</span>(isprime + <span class="number">2</span>, isprime + N, <span class="literal">true</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">2</span>; x &lt; N; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (isprime[x])</span><br><span class="line">			primes.<span class="built_in">push_back</span>(x);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> y : primes)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x * y &gt;= N)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			isprime[x * y] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (x % y == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (n / i &gt;= m)</span><br><span class="line">				ans = <span class="built_in">max</span>(ans, i);</span><br><span class="line">			<span class="keyword">if</span> (i &gt;= m)</span><br><span class="line">				ans = <span class="built_in">max</span>(ans, n / i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">preProcess</span>();</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---did-we-get-everything-covered">C - Did We Get Everything
Covered?</h2>
<p>一开始想了个最短路做法<del>（写一半发现太麻烦了）</del>。</p>
<p>可以用一个桶记录字母的出现情况，每次桶里前k个字符都不为空了，就清空桶，总轮数加一，记录下出现次数最少的那个字母（也就是最后一个字母）。最后再检查总轮数是否大于等于n。如果不满足，就在记录下的字母后面添任意字母，直到长度为n，输出即可。</p>
<p>下面是包含写fake了的最短路的代码（</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Did We Get Everything Covered?</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 921 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1925/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> cnt[N], from[N];</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">namespace</span> Graph</span><br><span class="line">&#123;</span><br><span class="line">	vector&lt;pli&gt; to[N];</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, ll val)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		to[x].<span class="built_in">push_back</span>(&#123;val, y&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> vis[N];</span><br><span class="line">	ll   dis[N];</span><br><span class="line">	<span class="type">int</span>  from[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">shortest_path</span><span class="params">(<span class="type">int</span> fr)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">// using Dijkstra</span></span><br><span class="line">		priority_queue&lt;pli, vector&lt;pli&gt;, greater&lt;pli&gt; &gt; q;</span><br><span class="line">		q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, fr));</span><br><span class="line">		<span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">		<span class="built_in">memset</span>(from, <span class="number">0</span>, <span class="keyword">sizeof</span> from);</span><br><span class="line">		dis[fr] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span> [nowval, x] = q.<span class="built_in">top</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span> (vis[x])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			vis[x] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [val, y] : to[x])</span><br><span class="line">				<span class="keyword">if</span> (dis[y] &gt; dis[x] + val)</span><br><span class="line">				&#123;</span><br><span class="line">					dis[y] = dis[x] + val;</span><br><span class="line">					from[y] = x;</span><br><span class="line">					q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[y], y));</span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void work()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span></span><br><span class="line"><span class="comment">	string s;</span></span><br><span class="line"><span class="comment">	cin &gt;&gt; s;</span></span><br><span class="line"><span class="comment">	s = &#x27; &#x27; + s;</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt;= m; i++)</span></span><br><span class="line"><span class="comment">		Graph::to[i].clear();</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt;= m + 1; i++)</span></span><br><span class="line"><span class="comment">		for (int j = 0; j &lt; k; j++)</span></span><br><span class="line"><span class="comment">			nxt[i][j] = m + 1;</span></span><br><span class="line"><span class="comment">	for (int i = m; i &gt;= 0; i--)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		for (int j = 0; j &lt; k; j++)</span></span><br><span class="line"><span class="comment">			nxt[i][j] = nxt[i + 1][j];</span></span><br><span class="line"><span class="comment">		if (i &gt; 0)</span></span><br><span class="line"><span class="comment">			nxt[i][s[i] - &#x27;a&#x27;] = i;</span></span><br><span class="line"><span class="comment">		for (int j = 0; j &lt; k; j++)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if (nxt[i][j] == m + 1)</span></span><br><span class="line"><span class="comment">				Graph::add(i, nxt[i + 1][j], 0);</span></span><br><span class="line"><span class="comment">			else</span></span><br><span class="line"><span class="comment">				Graph::add(i, nxt[i + 1][j], 1);</span></span><br><span class="line"><span class="comment">			//cout &lt;&lt; i &lt;&lt; &#x27; &#x27; &lt;&lt; nxt[i + 1][j] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	Graph::shortest_path(0);</span></span><br><span class="line"><span class="comment">	if (Graph::dis[m + 1] &lt; n)</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; &quot;NO\n&quot;;</span></span><br><span class="line"><span class="comment">		string st;</span></span><br><span class="line"><span class="comment">		int now = m + 1;</span></span><br><span class="line"><span class="comment">		while (now != 0)</span></span><br><span class="line"><span class="comment">		&#123;</span></span><br><span class="line"><span class="comment">			if (now != m + 1)</span></span><br><span class="line"><span class="comment">				st.push_back(s[now]);</span></span><br><span class="line"><span class="comment">			now = Graph::from[now];</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		reverse(st.begin(), st.end());</span></span><br><span class="line"><span class="comment">		int p = Graph::from[m + 1];</span></span><br><span class="line"><span class="comment">		for (int j = 0; j &lt; k; j++)</span></span><br><span class="line"><span class="comment">			if (nxt[p][j] == m + 1)</span></span><br><span class="line"><span class="comment">			&#123;</span></span><br><span class="line"><span class="comment">				st.push_back(j + &#x27;a&#x27;);</span></span><br><span class="line"><span class="comment">				break;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		while (st.size() &lt; n)</span></span><br><span class="line"><span class="comment">			st.push_back(&#x27;a&#x27;);</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; st &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	else</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; &quot;YES\n&quot;;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span><br><span class="line">	<span class="type">int</span> round = <span class="number">0</span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">but</span><span class="params">(<span class="number">26</span>)</span></span>;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	string ans;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!but[s[i] - <span class="string">&#x27;a&#x27;</span>])	</span><br><span class="line">			but[s[i] - <span class="string">&#x27;a&#x27;</span>] = i + <span class="number">1</span>;</span><br><span class="line">		<span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">			<span class="keyword">if</span> (but[j] == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag)</span><br><span class="line">		&#123;</span><br><span class="line">			round++;</span><br><span class="line">			<span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">				<span class="keyword">if</span> (but[id] &lt; but[j])</span><br><span class="line">					id = j;</span><br><span class="line">			ans.<span class="built_in">push_back</span>(id + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">				but[j] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (round &gt;= n)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">			<span class="keyword">if</span> (but[j] == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">while</span> (ans.<span class="built_in">size</span>() &lt; n)</span><br><span class="line">					ans.<span class="built_in">push_back</span>(j + <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d---good-trip">D - Good Trip</h2>
<p>题目作者的表述感觉emmm，最大的障碍是读懂题意？</p>
<p>令每轮老师选人前，所有可能被选中的两人队的友谊值期望为<span
class="math inline">\(E_i\)</span>，题目其实就是让我们求 <span
class="math display">\[
\sum_{i=1}^{n}E_i
\]</span> 每次可能有<span
class="math inline">\(\frac{n(n+1)}2\)</span>个不同的队被选中，令有友谊值的朋友的友谊值和为<span
class="math inline">\(sum_i\)</span>，总共<span
class="math inline">\(k\)</span>对朋友，那么很显然有： <span
class="math display">\[
E_i=\frac{sum_i}{\frac{n(n+1)}2}
\]</span> 然后<span class="math inline">\(sum_i\)</span>的推导也很简单：
<span class="math display">\[
sum_i=sum_{i-1} + \frac{k}{\frac{n(n+1)}2}
\]</span> 直接简单递推就行了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Good Trip</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 921 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1925/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll base, ll k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">			ans = (ans * base) % mod;</span><br><span class="line">		base = (base * base) % mod;</span><br><span class="line">		k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	ll sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">		sum += z;</span><br><span class="line">		sum %= mod;</span><br><span class="line">	&#125;</span><br><span class="line">	ll cnt = ((ll)(n) * (ll)(n - <span class="number">1</span>) / <span class="number">2LL</span>) % mod;</span><br><span class="line">	ll cntmod = <span class="built_in">ksm</span>(cnt, mod - <span class="number">2</span>);</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = (sum * cntmod % mod + ans) % mod;</span><br><span class="line">		sum = (sum + (m * cntmod % mod)) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e---space-harbour">E - Space Harbour</h2>
<p>一个数据结构好题。</p>
<p>询问操作，很显然可以拆分为<span
class="math inline">\(query(r)-query(l-1)\)</span>的操作。那么我们考虑用树状数组维护每个点的贡献。</p>
<p>但是很显然，每次插入港口，都会对很多个位置的贡献造成改变，显然不能直接维护贡献。</p>
<p>考虑一下一整段点贡献的性质，很容易发现的是，对于两个港口<span
class="math inline">\(pos_i,pos_{i-1}\)</span>​之间的位置，他们的贡献和可以表示为：
<span class="math display">\[
V_{pos_i} \times (1+2+3+\dots +(pos_i-pos_{i-1}-1)) \\\\
=V_{pos_i} \times \frac{(pos_i-pos_{i-1})(pos_i-pos_{i-1}-1)}{2}
\]</span>
考虑维护每一个坐标左边的最近港口的值，显然可以用树状数组差分完成。</p>
<p>那么，对于维护贡献，我们可以不维护全部点的贡献，转而维护连续整段的贡献。</p>
<p>具体的，我们算出两个港口之间答案的和，将这个答案存放在<span
class="math inline">\(pos_i+1\)</span>的位置上。这样，当查询<span
class="math inline">\(x\)</span>位置的贡献和时，对于整段区间，直接前缀和算出；对于结尾的小段，再单独计算即可。</p>
<p>然后是加入港口操作。显然，我们是把原来的一整段区间分成了两个区间。用个set维护港口的下标，求出上一个港口和下一个港口的坐标后，再更新一下两个树状数组即可。</p>
<p>这题小细节很多，要格外注意。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E. Space Harbour</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 921 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1925/problem/E</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll *a, ll x, ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (; x &lt;= n; x += <span class="built_in">lowbit</span>(x))</span><br><span class="line">		a[x] += v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll *a, ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (; x; x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">		ans += a[x];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;ll&gt; harbour;</span><br><span class="line"></span><br><span class="line">ll near[N];</span><br><span class="line"><span class="comment">// 差分记录上一个最近港口的val，</span></span><br><span class="line"><span class="comment">// 用树状数组维护</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="comment">// 记录当前区间段的总答案</span></span><br><span class="line"><span class="comment">// 假设两个相邻港口的位置为l, r</span></span><br><span class="line"><span class="comment">// 则[l+1, r-1]的答案之和统一存储在l+1上</span></span><br><span class="line"><span class="comment">// 用树状数组维护</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入新的港口</span></span><br><span class="line"><span class="comment">// 注意: 1和n的港口需要单独处理</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">new_harbour</span><span class="params">(ll x, ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 删去上一个near对x之后造成的影响</span></span><br><span class="line">	<span class="comment">// 同时删去x对下一个near之后的的数造成的影响</span></span><br><span class="line">	<span class="keyword">auto</span> old_val = <span class="built_in">query</span>(near, x);</span><br><span class="line">	<span class="built_in">add</span>(near, x, -old_val);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">add</span>(near, x, v);</span><br><span class="line">	<span class="keyword">auto</span> it = harbour.<span class="built_in">upper_bound</span>(x);</span><br><span class="line">	ll nxt = *it;</span><br><span class="line">	ll pre = *(--it);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">add</span>(near, nxt, -v);		</span><br><span class="line">	<span class="built_in">add</span>(near, nxt, old_val);	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 下面更新用于记录答案的ans</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pre + <span class="number">1</span> &lt;= nxt - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">auto</span> old_ans = <span class="built_in">query</span>(ans, pre + <span class="number">1</span>) - <span class="built_in">query</span>(ans, pre);</span><br><span class="line">		<span class="built_in">add</span>(ans, pre + <span class="number">1</span>, -old_ans);</span><br><span class="line">		<span class="comment">// x左边区间的答案</span></span><br><span class="line">		ll cnt1 = x - pre - <span class="number">1</span>;</span><br><span class="line">		ll val1 = <span class="built_in">query</span>(near, pre + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">add</span>(ans, pre + <span class="number">1</span>, val1 * (cnt1 + <span class="number">1LL</span>) * cnt1 / <span class="number">2LL</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// x右边区间的答案</span></span><br><span class="line">		ll cnt2 = nxt - x - <span class="number">1</span>;</span><br><span class="line">		ll val2 = v;</span><br><span class="line">		<span class="built_in">add</span>(ans, x + <span class="number">1</span>, val2 * (cnt2 + <span class="number">1LL</span>) * cnt2 / <span class="number">2LL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	harbour.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">getvalue</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">auto</span> it = harbour.<span class="built_in">lower_bound</span>(x);</span><br><span class="line">	ll now = <span class="built_in">query</span>(ans, x);</span><br><span class="line">	<span class="keyword">if</span> ((*it) - x - <span class="number">1</span> &lt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> now;</span><br><span class="line">	&#125;</span><br><span class="line">	ll val = <span class="built_in">query</span>(near, x);</span><br><span class="line">	ll cnt = (*it) - x - <span class="number">1</span>;</span><br><span class="line">	now -= val * (cnt + <span class="number">1LL</span>) * cnt / <span class="number">2LL</span>;</span><br><span class="line">	<span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pll initHarbour[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		cin &gt;&gt; initHarbour[i].first;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		cin &gt;&gt; initHarbour[i].second;</span><br><span class="line">	<span class="built_in">sort</span>(initHarbour + <span class="number">1</span>, initHarbour + m + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 下面单独插入1和n位置的港口</span></span><br><span class="line">	harbour.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">	harbour.<span class="built_in">insert</span>(n);</span><br><span class="line">	ll cnt = n - <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">add</span>(near, <span class="number">1</span>, initHarbour[<span class="number">1</span>].second);</span><br><span class="line">	<span class="built_in">add</span>(near, n, -initHarbour[<span class="number">1</span>].second);</span><br><span class="line">	<span class="built_in">add</span>(ans, <span class="number">2</span>, initHarbour[<span class="number">1</span>].second * (cnt + <span class="number">1LL</span>) * cnt / <span class="number">2LL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 下面再插入非1和n位置的港口</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; m; i++)</span><br><span class="line">		<span class="built_in">new_harbour</span>(initHarbour[i].first, initHarbour[i].second);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ll opt, l, r;</span><br><span class="line">		cin &gt;&gt; opt &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		<span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">new_harbour</span>(l, r);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ll ans1 = <span class="built_in">getvalue</span>(r), ans2 = <span class="built_in">getvalue</span>(l - <span class="number">1</span>);</span><br><span class="line">			cout &lt;&lt; ans1 - ans2 &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 930 Div 2</title>
    <url>/1493986583/</url>
    <content><![CDATA[<h2 id="a.-shuffle-party">A. <a
href="https://codeforces.com/contest/1937/problem/A">Shuffle
Party</a></h2>
<h3 id="比赛想法">比赛想法：</h3>
<p>观察样例，发现答案小于等于n，且是2的整数次幂，猜测答案为小于等于n的最大的2的整次幂。</p>
<h3 id="赛后证明">赛后证明：</h3>
<p>显然，对于一个整数<span
class="math inline">\(d\)</span>，它的最小倍数一定是<span
class="math inline">\(2d\)</span>。则对于1来说，每次都×2，最终答案就是最大的小于n的2的整次幂。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Shuffle Party</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 930 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1937/problem/0</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; (<span class="number">1LL</span> &lt;&lt; (<span class="type">int</span>)<span class="built_in">log2</span>(n)) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-binary-path">B. <a
href="https://codeforces.com/contest/1937/problem/B">Binary
Path</a></h2>
<p>显然，蚱蜢只会向右移动一次，总共有n种可能，所以我们可以枚举向右走的地方。</p>
<p>我们设两个变量<code>maxid</code>和<code>s</code>，分别表示在第<code>maxid</code>行向右行，以及有<code>s</code>个与其相等的序列。假设现在在第<span
class="math inline">\(i\)</span>行，显然有两种可能：向下走和向右走。有3种情况：</p>
<ol type="1">
<li>两个数相等：则这两种情况相等，<code>s</code>累加上1。</li>
<li>向下的是0，向右的是1：则只有向下走一种可能，更新<code>maxid</code>，<code>s</code>重置为1。</li>
<li>向下的是1，向右的是0：则显然只能向右走了，后面没有分支了，直接<code>break</code>。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Binary Path</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 930 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1937/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N][<span class="number">2</span>], f[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		a[i][<span class="number">0</span>] = s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		a[i][<span class="number">1</span>] = s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="type">int</span> maxid = <span class="number">1</span>, s0 = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i - <span class="number">1</span>][<span class="number">1</span>] == a[i][<span class="number">0</span>])</span><br><span class="line">			s0++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[i - <span class="number">1</span>][<span class="number">1</span>] &gt; a[i][<span class="number">0</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			s0 = <span class="number">1</span>;</span><br><span class="line">			maxid = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxid; i++)</span><br><span class="line">		cout &lt;&lt; a[i][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxid; i &lt;= n; i++)</span><br><span class="line">		cout &lt;&lt; a[i][<span class="number">1</span>];</span><br><span class="line">	cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; s0 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-bitwise-operation-wizard">C. <a
href="https://codeforces.com/contest/1937/problem/C">Bitwise Operation
Wizard</a></h2>
<p>非常有趣的一题。</p>
<p>我们设小于等于<code>n-1</code>的最大的2的整次幂数为<span
class="math inline">\(2^p\)</span>，容易发现，能得到最大的数对异或和为<span
class="math inline">\(2^{p+1}-1\)</span>。</p>
<p>每次可以询问<code>(a | b)</code>和<code>(c | d)</code>的大小关系。如果<code>a=b, c=d</code>，那么相当于询问<code>a</code>与<code>b</code>的大小。这样我们可以用<code>n-1</code>次询问得出最大的数<code>maxn</code>。</p>
<p>然后，令<span class="math inline">\(fix=(2^{p+1}-1) \oplus
maxn\)</span>，显然有<span
class="math inline">\(fix|maxn=2^{p+1}-1\)</span>。观察所有满足<span
class="math inline">\(maxn|q=2^{p+1}-1\)</span>的数，显然，<span
class="math inline">\(fix\)</span>是其中最小的。这样，我们只要先求出<span
class="math inline">\(p\oplus
q\)</span>的最大值，每次更新最大值时再求出最小的<span
class="math inline">\(q\)</span>，这样这部分就能在<span
class="math inline">\(2n\)</span>次询问完成。总共小于<span
class="math inline">\(3n\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Bitwise Operation Wizard</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 930 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1937/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> maxid = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; maxid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; maxid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		<span class="type">char</span> cmp;</span><br><span class="line">		cin &gt;&gt; cmp;</span><br><span class="line">		<span class="keyword">if</span> (cmp == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			maxid = i; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> xorid = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (maxid == <span class="number">0</span>)</span><br><span class="line">		xorid = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == maxid || i == xorid)</span><br><span class="line">			<span class="keyword">continue</span>;	</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; maxid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; xorid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; maxid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		<span class="type">char</span> cmp0;</span><br><span class="line">		cin &gt;&gt; cmp0;</span><br><span class="line">		<span class="keyword">if</span> (cmp0 == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			xorid = i;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cmp0 == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; xorid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; xorid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			<span class="type">char</span> cmp1;</span><br><span class="line">			cin &gt;&gt; cmp1;</span><br><span class="line">			<span class="keyword">if</span> (cmp1 == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">				xorid = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; maxid &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; xorid &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-pinball">D. <a
href="https://codeforces.com/contest/1937/problem/D">Pinball</a></h2>
<p>对于第<span
class="math inline">\(i\)</span>位，发现左边每有一个&gt;，就会有一次折返；右边每有一个&lt;，也会有一个折返。</p>
<p>发现在坐标向右移动的过程中，左边的&gt;递增，右边的&lt;递减。我们用单调队列维护左边折返用时以及右边折返用时。</p>
<p>这题细节很多，需要注意写法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Pinball</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 930 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1937/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">ll pre[N], nxt[N];</span><br><span class="line">ll fwd[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	s = <span class="string">&#x27; &#x27;</span> + s;</span><br><span class="line">	pre[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		ans[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pre[i] = pre[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">			pre[i]++;</span><br><span class="line">	&#125;</span><br><span class="line">	nxt[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		nxt[i] = nxt[i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			nxt[i]++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// fwd[i] = 0 left</span></span><br><span class="line">    <span class="comment">//            = 1 right</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			fwd[i] = pre[i - <span class="number">1</span>] &gt; nxt[i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			fwd[i] = pre[i - <span class="number">1</span>] &gt;= nxt[i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (!fwd[i])</span><br><span class="line">			ans[i] += i;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			ans[i] += n - i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	queue&lt;ll&gt; q1, q2;</span><br><span class="line">	ll tag = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tag += <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">			q1.<span class="built_in">push</span>(-tag);		</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">			sum += (q1.<span class="built_in">size</span>() - <span class="number">1</span>) * <span class="number">2LL</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			sum += (q1.<span class="built_in">size</span>()) * <span class="number">2LL</span>;</span><br><span class="line">		<span class="keyword">while</span> (q1.<span class="built_in">size</span>() &gt; nxt[i] + (<span class="type">int</span>)(s[i] == <span class="string">&#x27;&gt;&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			sum -= tag + q1.<span class="built_in">front</span>();</span><br><span class="line">			q1.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans[i] += sum;</span><br><span class="line">	&#125;</span><br><span class="line">	tag = sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		tag += <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			q2.<span class="built_in">push</span>(-tag);</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">&#x27;&lt;&#x27;</span>)</span><br><span class="line">			sum += (q2.<span class="built_in">size</span>() - <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			sum += q2.<span class="built_in">size</span>() * <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span> (q2.<span class="built_in">size</span>() &gt; pre[i] + (<span class="type">int</span>)(s[i] == <span class="string">&#x27;&lt;&#x27;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			sum -= tag + q2.<span class="built_in">front</span>();</span><br><span class="line">			q2.<span class="built_in">pop</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans[i] += sum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 931 Div 2</title>
    <url>/4286277283/</url>
    <content><![CDATA[<h2 id="a.-too-min-too-max">A. <a
href="https://codeforces.com/contest/1934/problem/A">Too Min Too
Max</a></h2>
<p>令<span class="math inline">\(a\leq b\leq c\leq
d\)</span>，手玩以下就能发现等式得出的最大的取值就是<span
class="math inline">\(2\times
(c+d-a-b)\)</span>。<code>sort</code>一下取最大和最小的两个数就行了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Too Min Too Max</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 931 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1934/problem/0</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; (a[n] - a[<span class="number">1</span>] + a[n - <span class="number">1</span>] - a[<span class="number">2</span>]) * <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-yet-another-coin-problem">B. <a
href="https://codeforces.com/contest/1934/problem/B">Yet Another Coin
Problem</a></h2>
<p>如果n比较小，显然简单dp就能解决。</p>
<p>在n比较大的时候，可以发现，一定有一个数取了大部分。先预处理一定范围内的答案（比如1000），然后枚举这个数，用这个数把n减到1000以内，然后两部分答案相加即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Yet Another Coin Problem</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 931 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1934/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> ans = inf;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="built_in">max</span>(<span class="number">0</span>, (n - <span class="number">900</span>) / a[i]);</span><br><span class="line">		<span class="type">int</span> now_n = n - cnt * a[i];</span><br><span class="line">		<span class="type">int</span> now = cnt + f[now_n];</span><br><span class="line">		ans = <span class="built_in">min</span>(ans, now);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i] = inf;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)</span><br><span class="line">			<span class="keyword">if</span> (i &gt;= a[j])</span><br><span class="line">				f[i] = <span class="built_in">min</span>(f[i], f[i - a[j]] + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-find-a-mine">C. <a
href="https://codeforces.com/contest/1934/problem/C">Find a
Mine</a></h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Find a Mine</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 931 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1934/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">auto</span> query = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> answer = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> dis1, dis2, dis3, dis4;</span><br><span class="line">	<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	cin &gt;&gt; dis1;</span><br><span class="line">	<span class="built_in">query</span>(n, <span class="number">1</span>);</span><br><span class="line">	cin &gt;&gt; dis2;</span><br><span class="line">	<span class="built_in">query</span>(<span class="number">1</span>, m);</span><br><span class="line">	cin &gt;&gt; dis3;</span><br><span class="line">	<span class="keyword">auto</span> cross = [&amp;](<span class="type">int</span> k1, <span class="type">int</span> b1, <span class="type">int</span> k2, <span class="type">int</span> b2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = (b2 - b1) / (k1 - k2);</span><br><span class="line">		<span class="type">int</span> y = k1 * x + b1;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">make_pair</span>(x, y);	</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> p1 = <span class="built_in">cross</span>(<span class="number">-1</span>, dis1 + <span class="number">2</span>, <span class="number">1</span>, dis2 - n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">auto</span> p2 = <span class="built_in">cross</span>(<span class="number">-1</span>, dis1 + <span class="number">2</span>, <span class="number">1</span>, m - dis3 - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">1</span> &lt;= p1.first &amp;&amp; p1.first &lt;= n &amp;&amp; <span class="number">1</span> &lt;= p1.second &amp;&amp; p1.second &lt;= m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">query</span>(p1.first, p1.second);</span><br><span class="line">		cin &gt;&gt; dis4;</span><br><span class="line">		<span class="keyword">if</span> (dis4 == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">answer</span>(p1.first, p1.second);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">answer</span>(p2.first, p2.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">answer</span>(p2.first, p2.second);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d1.-xor-break-----solo-version">D1. <a
href="https://codeforces.com/contest/1934/problem/D1">XOR Break --- Solo
Version</a></h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Find a Mine</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 931 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1934/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">auto</span> query = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;? &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> answer = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;! &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> dis1, dis2, dis3, dis4;</span><br><span class="line">	<span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">	cin &gt;&gt; dis1;</span><br><span class="line">	<span class="built_in">query</span>(n, <span class="number">1</span>);</span><br><span class="line">	cin &gt;&gt; dis2;</span><br><span class="line">	<span class="built_in">query</span>(<span class="number">1</span>, m);</span><br><span class="line">	cin &gt;&gt; dis3;</span><br><span class="line">	<span class="keyword">auto</span> cross = [&amp;](<span class="type">int</span> k1, <span class="type">int</span> b1, <span class="type">int</span> k2, <span class="type">int</span> b2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = (b2 - b1) / (k1 - k2);</span><br><span class="line">		<span class="type">int</span> y = k1 * x + b1;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">make_pair</span>(x, y);	</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> p1 = <span class="built_in">cross</span>(<span class="number">-1</span>, dis1 + <span class="number">2</span>, <span class="number">1</span>, dis2 - n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">auto</span> p2 = <span class="built_in">cross</span>(<span class="number">-1</span>, dis1 + <span class="number">2</span>, <span class="number">1</span>, m - dis3 - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">1</span> &lt;= p1.first &amp;&amp; p1.first &lt;= n &amp;&amp; <span class="number">1</span> &lt;= p1.second &amp;&amp; p1.second &lt;= m)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">query</span>(p1.first, p1.second);</span><br><span class="line">		cin &gt;&gt; dis4;</span><br><span class="line">		<span class="keyword">if</span> (dis4 == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">answer</span>(p1.first, p1.second);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">answer</span>(p2.first, p2.second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">answer</span>(p2.first, p2.second);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 934 Div 2</title>
    <url>/2906867972/</url>
    <content><![CDATA[<h2 id="a.destroying-bridges">A.<a
href="https://codeforces.com/contest/1944/problem/A">Destroying
Bridges</a></h2>
<p>显然，如果k大于等于了n-1，那么可以将与1相连的所有边给去掉，最小值就是1。</p>
<p>如果不够，显然不存在任何一种方法将某一个点孤立出来。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Destroying Bridges</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 934 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1944/problem/A</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="type">int</span> ans = n;</span><br><span class="line">	<span class="keyword">if</span> (k &gt;= n - <span class="number">1</span>)</span><br><span class="line">		cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-equal-xor">B. <a
href="https://codeforces.com/contest/1944/problem/B">Equal XOR</a></h2>
<p>我们将左半边称作<span
class="math inline">\(A\)</span>，右半边称作<span
class="math inline">\(B\)</span>，发现有以下性质：</p>
<ol type="1">
<li>倘若<span class="math inline">\(A\)</span>里某数只有一个，那<span
class="math inline">\(B\)</span>一定<strong>存在且仅存在</strong>一个这个数；</li>
<li>倘若<span
class="math inline">\(A\)</span>里有p对相同的数，那么另一边也一定<strong>有且仅有</strong>p对相同的数。</li>
</ol>
<p>知道这两个性质，我们很容易想到构造合法方案的方法。详情见代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Equal XOR</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 934 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1944/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">2</span> * n)</span>, <span class="title">but1</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">but2</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; q1, q2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; n)</span><br><span class="line">			but1[a[i]]++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			but2[a[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (but2[i] == <span class="number">1</span> &amp;&amp; but1[i] == <span class="number">1</span> &amp;&amp; (<span class="type">int</span>)(q1.<span class="built_in">size</span>()) &lt; <span class="number">2</span> * k)</span><br><span class="line">		&#123;</span><br><span class="line">			q1.<span class="built_in">push_back</span>(i);</span><br><span class="line">			q2.<span class="built_in">push_back</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span> (q1.<span class="built_in">size</span>() % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q1.<span class="built_in">pop_back</span>();</span><br><span class="line">		q2.<span class="built_in">pop_back</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">int</span>)q1.<span class="built_in">size</span>() &lt; <span class="number">2</span> * k &amp;&amp; but1[i] == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			q1.<span class="built_in">push_back</span>(i);</span><br><span class="line">			q1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> ((<span class="type">int</span>)q2.<span class="built_in">size</span>() &lt; <span class="number">2</span> * k &amp;&amp; but2[i] == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			q2.<span class="built_in">push_back</span>(i);</span><br><span class="line">			q2.<span class="built_in">push_back</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : q1)</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : q2)</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-mex-game-1">C. <a
href="https://codeforces.com/contest/1944/problem/C">MEX Game 1</a></h2>
<p>我们假设数字p只有一个，<span class="math inline">\(\{0,1,2,\ldots
p-1\}\)</span>都有两个以上，显然，<code>Alice</code>必须将<span
class="math inline">\(p\)</span>取掉，否则<span
class="math inline">\(p\)</span>就会被<code>Bob</code>取掉，答案就被固定在<span
class="math inline">\(p\)</span>了。</p>
<p>而对于<code>Bob</code>来说，由于他是后手，所以取任何一个次数大于1的数都是没有意义的（在取到0之前就会被<code>Alice</code>取掉）。所以，和<code>Alice</code>一样，他的最优选择就是取掉当前数字最小的、出现次数为1的数。</p>
<p>由于前面<code>Alice</code>取掉了最小的那个<span
class="math inline">\(p\)</span>，所以<code>Bob</code>只能取第二大的<span
class="math inline">\(q\)</span>。所以最大的<code>mex</code>就是<span
class="math inline">\(q\)</span>。</p>
<p>注意，如果只有一个次数为1的数，或者一个都没有，就不存在第二大的数了。此时我们应该选择出现的最大数字+1，即<code>mex = maxnum + 1</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. MEX Game 1</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 934 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1944/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">but</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		but[a[i]]++;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">	<span class="type">bool</span> bj = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (but[i] == <span class="number">1</span>)</span><br><span class="line">			ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (but[i] == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">			bj = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bj == <span class="number">0</span>)</span><br><span class="line">		ans.<span class="built_in">push_back</span>(n);</span><br><span class="line">	<span class="keyword">if</span> (ans.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; ans[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; ans[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-tree-compass">E. <a
href="https://codeforces.com/contest/1944/problem/E">Tree
Compass</a></h2>
<p>很有意思的结论图论题。</p>
<p>考虑分类讨论。</p>
<h3 id="n是奇数"><span class="math inline">\(N\)</span>是奇数</h3>
<p>令这棵树的直径节点个数为<span
class="math inline">\(N\)</span>。显然，这条直径是原树的一个子图，而这条链答案显然为<span
class="math inline">\(\lfloor\frac{N}{2}\rfloor+1\)</span>，所以答案的下界一定是<span
class="math inline">\(\lfloor\frac{N}{2}\rfloor+1\)</span>。</p>
<p>这条直径就只有一个中心点。我们直接对这个点操作，对<span
class="math inline">\(d=\{0,1,2\ldots[\frac{N}{2}]\}\)</span>染色，显然染完了所有节点，答案为<span
class="math inline">\(\lfloor\frac{N}{2}\rfloor+1\)</span>，达到了答案下界，所以是最优解。</p>
<h3 id="n是偶数"><span class="math display">\[N\]</span>​是偶数</h3>
<p>在这种情况下，N显然存在两个中心点<code>pos1,pos2</code>。我们发现，如果对<code>pos1</code>进行<span
class="math inline">\(d=d_0\)</span>的操作，相当于对<code>pos2</code>进行了一次<span
class="math inline">\(d=d_0-1\)</span>的操作。继续分类讨论。</p>
<p>我们令半径<span class="math inline">\(R=\frac N
2\)</span>，我们对<code>pos1</code>进行<span
class="math inline">\(d=1\)</span>的操作，相当于对<code>pos2</code>进行了<span
class="math inline">\(d=0\)</span>的操作；对<code>pos2</code>进行<span
class="math inline">\(d=1\)</span>的操作，相当于对<code>pos1</code>进行了<span
class="math inline">\(d=0\)</span>​的操作。在这一轮操作里，我们用2次完成了对<span
class="math inline">\(pos1,pos2\)</span>的<span
class="math inline">\(d=0,1\)</span>的操作。此时再对<span
class="math inline">\(R\)</span>分类讨论。</p>
<h4 id="r是偶数"><span class="math inline">\(R\)</span>是偶数</h4>
<p>我们进行<span class="math inline">\(\frac R
2\)</span>轮上述操作，就完成了整张图的覆盖。共用<span
class="math inline">\(cnt=2 \times \frac R 2=\frac N
2\)</span>。这种情况显然达到了答案下界。</p>
<h4 id="r是奇数">R是奇数</h4>
<p>这种情况下，我们先做<span class="math inline">\(\lfloor\frac
R2\rfloor\)</span>轮上述操作，此时，我们还剩下离<span
class="math inline">\(pos1\)</span>距离为<span
class="math inline">\(d=R-1,R\)</span>的节点没有覆盖。因此需要再覆盖两次。最终答案为<span
class="math inline">\(cnt=2 \times \frac{R-1} 2+2=2R+1=\frac N
2+1\)</span>次，也达到了下界。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E. Tree Compass</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 934 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1944/problem/E</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d1[N], d2[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; E[N];</span><br><span class="line"><span class="type">int</span> maxpos = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> to1[N], to2[N];</span><br><span class="line"><span class="comment">// find tree radium module from oi-wiki</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">  d1[u] = d2[u] = <span class="number">0</span>;</span><br><span class="line">  to1[u] = to2[u] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> v : E[u]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    <span class="type">int</span> t = d1[v] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t &gt; d1[u])</span><br><span class="line">    &#123;</span><br><span class="line">      to2[u] = to1[u];</span><br><span class="line">      to1[u] = v;</span><br><span class="line">      d2[u] = d1[u];</span><br><span class="line">      d1[u] = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &gt; d2[u])</span><br><span class="line">    &#123;</span><br><span class="line">      d2[u] = t;</span><br><span class="line">      to2[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (maxpos == <span class="number">-1</span> || d1[u] + d2[u] &gt; d1[maxpos] + d2[maxpos])</span><br><span class="line">  	maxpos = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	maxpos = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;1\n1 0&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		E[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		E[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">		E[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">	ans.<span class="built_in">push_back</span>(maxpos);</span><br><span class="line">	<span class="type">int</span> l = to1[maxpos], r = to2[maxpos];</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;maxpos = &quot; &lt;&lt; maxpos &lt;&lt; endl;</span></span><br><span class="line">	<span class="keyword">while</span> (l != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(l);</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;now l = &quot; &lt;&lt; l &lt;&lt; endl;</span></span><br><span class="line">		l = to1[l];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">while</span> (r != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ans.<span class="built_in">push_back</span>(r);</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;now r = &quot; &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">		r = to1[r];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans.<span class="built_in">size</span>() % <span class="number">4</span> != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> pos = ans[ans.<span class="built_in">size</span>() / <span class="number">2</span>], len = (ans.<span class="built_in">size</span>()) / <span class="number">2</span>;</span><br><span class="line">		cout &lt;&lt; len + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i++)</span><br><span class="line">			cout &lt;&lt; pos &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		cout &lt;&lt; flush;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> pos1 = ans[ans.<span class="built_in">size</span>() / <span class="number">2</span>], pos2 = ans[ans.<span class="built_in">size</span>() / <span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">		<span class="type">int</span> len = ans.<span class="built_in">size</span>() / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">		cout &lt;&lt; len + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i += <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; pos1 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; pos2 &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 936 Div 2</title>
    <url>/987519021/</url>
    <content><![CDATA[<h2 id="a.-median-of-an-array">A. <a
href="https://codeforces.com/contest/1946/problem/A">Median of an
Array</a></h2>
<p>显然，有多少个和中位数相等的数就加多少次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: A. Median of an Array</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 936 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1946/problem/0</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> pos = (n - <span class="number">1</span>) / <span class="number">2</span>, cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (pos &lt; n - <span class="number">1</span> &amp;&amp; a[pos] == a[pos + <span class="number">1</span>])</span><br><span class="line">		pos++, cnt++;</span><br><span class="line">	cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b.-maximum-sum">B. <a
href="https://codeforces.com/contest/1946/problem/B">Maximum
Sum</a></h2>
<p>很显然，如果没有插入操作的话，答案显然就是最大子段和<span
class="math inline">\(sum\)</span>。</p>
<p>如果有插入操作的话，我们只需要把这个最大子段和的值插在最大子段的旁边，答案就变成了<span
class="math inline">\(2\times
sum\)</span>。如是，我们重复k次，答案就变成了<span
class="math inline">\((1+2+4+\ldots +2^k)\times sum=(2^{k+1}-1)\times
sum\)</span>。</p>
<p>因为k比较小，直接暴力算就好。最后答案还要加上整个数列的和。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Maximum Sum</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 936 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1946/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">const</span> ll mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	ll ans = <span class="number">0</span>;</span><br><span class="line">	ll sum = <span class="number">0</span>, maxsum = <span class="number">0</span>, numsum = <span class="number">0</span>;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		numsum += a[i];</span><br><span class="line">		numsum %= mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += a[i];</span><br><span class="line">		<span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">			sum = <span class="number">0</span>;</span><br><span class="line">		maxsum = <span class="built_in">max</span>(maxsum, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans += maxsum;</span><br><span class="line">		ans %= mod;</span><br><span class="line">		maxsum += maxsum;</span><br><span class="line">		maxsum %= mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; (ans + numsum + <span class="number">2LL</span> * mod) % mod &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-tree-cutting">C. <a
href="https://codeforces.com/contest/1946/problem/C">Tree
Cutting</a></h2>
<p>看到最小连通块的最大值，很容易想到用二分解决。关键在于设计<code>check(lim)</code>。</p>
<p>在有<code>lim</code>限制的情况下，一个贪心的策略是，我们使每个连通块都在满足限制的情况下尽可能小。</p>
<p>我们设两个变量<code>cnt[x]</code>和<code>rest[x]</code>，分别表示以<code>x</code>为根的子树能够凑出多少个<strong>不包含<code>x</code></strong>的连通块个数，以及在去除这些连通块后，<strong>包含<code>x</code></strong>的最大连通块的大小。</p>
<p>对于当前节点<code>x</code>，我们先遍历每个子树，然后对答案进行处理。</p>
<p>对于其子节点<code>y</code>，若<code>rest[y] &gt;= lim</code>，则显然，可以凑出一个包含<code>y</code>的连通块个数，我们将<code>cnt[x]</code>加上1。反之，凑不出时，这些节点就应该与<code>x</code>呆在一个连通块里，将其累加到<code>rest[x]</code>里。除此之外，<code>cnt[x]</code>显然包括<code>cnt[y]</code>，直接累加上。</p>
<p>这样就完成了<code>check(lim)</code>的构造。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Tree Cutting</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 936 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1946/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; son[N];</span><br><span class="line"><span class="type">int</span> rest[N], cnt[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f, <span class="type">int</span> lim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cnt[x] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	rest[x] = <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y : son[x])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y == f)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(y, x, lim);</span><br><span class="line">		cnt[x] += cnt[y];</span><br><span class="line">		<span class="keyword">if</span> (rest[y] &gt;= lim)</span><br><span class="line">		&#123;</span><br><span class="line">			cnt[x]++;</span><br><span class="line">			rest[y] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		rest[x] += rest[y];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; &quot;Now x = &quot; &lt;&lt; x &lt;&lt; &quot;, Lim = &quot; &lt;&lt; lim &lt;&lt; &quot;, rest[x] = &quot; &lt;&lt; rest[x] &lt;&lt; &quot;, cnt[x] = &quot; &lt;&lt; cnt[x] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		son[i].<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		son[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">		son[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> l = <span class="number">1</span>, r = n, mid, ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, x);</span><br><span class="line">		<span class="type">int</span> ans = cnt[<span class="number">1</span>] + (<span class="type">int</span>)(rest[<span class="number">1</span>] &gt;= x);</span><br><span class="line">		<span class="comment">//cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot;, ans = &quot;  &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">		<span class="comment">//cout &lt;&lt; rest[1] &lt;&lt; &#x27; &#x27; &lt;&lt; cnt[1] &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">return</span> ans &gt;= k + <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">			l = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-birthday-gift">D. <a
href="https://codeforces.com/contest/1946/problem/D">Birthday
Gift</a></h2>
<p>看到这种奇奇怪怪的二进制题，第一考虑二进制位的拆分。</p>
<p>我们令<span class="math inline">\(a_i\)</span>的前缀异或和为<span
class="math inline">\(s_i\)</span>，第<span
class="math inline">\(i\)</span>段的异或和为<span
class="math inline">\(L_i\)</span>，则有 <span class="math display">\[
L_i=s_{r_i}\oplus s_{r_{i-1}}
\]</span> 注意，这里我们讨论的是二进制拆分后的结果。</p>
<p>那么，对于这一位分组后的答案<span
class="math inline">\(s\)</span>，显然有 <span class="math display">\[
s=L_1 | L_2 | \ldots|L_k
\]</span> 我们发现，要使<span
class="math inline">\(s\)</span>等于0，就有 <span
class="math display">\[
L_1=L_2=L_3=\ldots=L_k=0
\]</span> 也即 <span class="math display">\[
s_{r_1}=s_{r_2}=s_{r_3}=\ldots=s_{r_k}=0
\]</span> 也就是说，只要我们能选出k个等于0的<span
class="math inline">\(s_{r_i}\)</span>​，这一位的答案就能够等于0。</p>
<p>接下来考虑答案的具体取法。对于二进制下某一位来说，有2种情况</p>
<h3 id="x1">1. <span class="math inline">\(x=1\)</span>​</h3>
<p>在这种情况下，如果我能在<span
class="math inline">\(s_{r_i}\)</span>凑到k个0，我就能使这一位答案变成0，显然存在合法的划分方法。</p>
<p>倘若凑不到，也没关系，直接对比下一位就好。</p>
<h3 id="x0">2. <span class="math inline">\(x=0\)</span></h3>
<p>在这种情况下，如果我凑不到k个0，答案只能为1，无论如何也不可能使答案小于x了，显然不合法。</p>
<p>如果能凑到，那我们将结果与上一位的结果合并，比较下一位。</p>
<p>经过这样一番讨论后，我们发现，有两种情况可以直接结束判断，另外两种需要结合更高位的选择进行判断。</p>
<p>对此，我们可以设<span
class="math inline">\(S_1\)</span>为之前的轮数中，使答案和x相等的<span
class="math inline">\(r_i\)</span>集合，<span
class="math inline">\(S_2\)</span>为当前位上满足<span
class="math inline">\(s_{r_i}=0\)</span>的<span
class="math inline">\(r_i\)</span>的集合，<span
class="math inline">\(S_3=S_1 \cap S_2\)</span>。</p>
<p>如果<span class="math inline">\(S_3\)</span>中集合大小大于等于<span
class="math inline">\(k\)</span>且其中包含<span
class="math inline">\(n\)</span>​，我们就认为这一位满足使这一位答案为0的要求；反之则不满足。这样就完成了判断是否能划分出<span
class="math inline">\(k\)</span>段满足要求子段了。剩下的二分一下就能解决。</p>
<p>结合这个操作以及上面分类讨论的内容，就可以顺利写出代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Birthday Gift</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 936 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1946/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">p</span><span class="params">(n + <span class="number">1</span>)</span>, <span class="title">q</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> clear = [&amp;](vector&lt;<span class="type">bool</span>&gt; &amp;s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			s[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		a[i] = a[i - <span class="number">1</span>] <span class="keyword">xor</span> a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">int</span> lim)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			s[i] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (ll bit = <span class="number">32</span>; bit &gt;= <span class="number">0</span>; bit--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">clear</span>(p);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">				<span class="keyword">if</span> (!(a[i] &amp; (<span class="number">1LL</span> &lt;&lt; bit)))</span><br><span class="line">					p[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				q[i] = s[i] &amp; p[i];</span><br><span class="line">				cnt += q[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (x &amp; (<span class="number">1LL</span> &lt;&lt; bit)) <span class="comment">// x = 1</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (cnt &gt;= lim &amp;&amp; q[n])</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (cnt &lt; lim || !q[n])</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">					s[i] = q[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	ll l = <span class="number">0</span>, r = n, mid, ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">		&#123;</span><br><span class="line">			l = mid + <span class="number">1</span>;</span><br><span class="line">			ans = mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			r = mid - <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans != <span class="number">0</span>)</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-girl-permutation">E. <a
href="https://codeforces.com/contest/1946/problem/E">Girl
Permutation</a></h2>
<p>对于数字n，很显然没有比他更大的数了，所以他一定同时是<code>suffix max</code>和<code>prefix max</code>。</p>
<p>而且，在n之后的位置不可能是<code>prefix max</code>，在之前的位置不可能是<code>suffix max</code>，所以合法的排列中，n的位置一定是<code>prefix max</code>中最大的，<code>suffix max</code>中最小的。这样，<code>prefix max</code>和<code>suffix max</code>就被<code>n</code>分为了两部分，问题就转化为已知<code>prefix max</code>求合法的排列数。</p>
<p>结论：<span class="math inline">\(ans=\prod_{i不是prefix\
max}{i-1}\)</span>。下面是证明：</p>
<p>设当前位为<span class="math inline">\(i\)</span>，前面共有<span
class="math inline">\(i-1\)</span>个数。我们用<span
class="math inline">\(R\)</span>表示前面确定的各位置上数的大小。</p>
<p>如果当前位为<code>prefix max</code>，那么这个数比前面<span
class="math inline">\(i-1\)</span>个数都要大，也就是说，只能在<span
class="math inline">\(R\)</span>的最后插入<span
class="math inline">\(i\)</span>，只有一种可能。</p>
<p>如果当前位不为<code>prefix max</code>，则<span
class="math inline">\(i\)</span>有可能插入<code>R</code>的除最后一位以外的任意位置，共有<span
class="math inline">\(i-1\)</span>个位置。</p>
<p>由此，可以得出结论。</p>
<p>根据结论，我们分别计算出<code>n</code>左边和右边的答案<span
class="math inline">\(ans_1, ans_2\)</span>。令<span
class="math inline">\(n\)</span>左边有<span
class="math inline">\(k\)</span>个数，最后答案就为 <span
class="math display">\[
ans=ans_1 \times ans_2 \times \binom{n}{k}
\]</span></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E. Girl Permutation</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 936 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1946/problem/E</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">const</span> <span class="type">int64_t</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int64_t</span> fac[N], facRev[N];</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">quickPow</span><span class="params">(<span class="type">int64_t</span> base, <span class="type">int32_t</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int64_t</span> ans = <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>)</span><br><span class="line">            ans = (ans * base) % mod;</span><br><span class="line">        base = (base * base) % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = facRev[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int64_t</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int64_t</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">        facRev[i] = <span class="built_in">quickPow</span>(fac[i], mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int64_t</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n] * facRev[m] % mod * facRev[n - m] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> s1, s2;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(s1 + <span class="number">1</span>)</span>, <span class="title">b</span><span class="params">(s2 + <span class="number">1</span>)</span>, <span class="title">vis</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		vis[a[i]] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= s2; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; b[i];</span><br><span class="line">		vis[b[i]] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">sort</span>(b.<span class="built_in">begin</span>() + <span class="number">1</span>, b.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">if</span> (*a.<span class="built_in">rbegin</span>() != *(b.<span class="built_in">begin</span>() + <span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> pos = *(b.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">	ll ans = <span class="number">1LL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; pos; i++)</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">			ans = (ans * (i - <span class="number">1</span>)) % mod;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = pos + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span> (!vis[i])</span><br><span class="line">			ans = (ans * (n - i)) % mod;</span><br><span class="line">	ans = (ans * <span class="built_in">C</span>(n - <span class="number">1</span>, pos - <span class="number">1</span>)) % mod;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">		fac[i] = fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 948 Div 2</title>
    <url>/1613113961/</url>
    <content><![CDATA[<h2 id="题外话">题外话</h2>
<p>鸽了好久，忙学校的一堆b课和b考试，打了CF也没写题解。打场div2复健一下。</p>
<h2 id="完成情况">完成情况</h2>
<table>
<thead>
<tr class="header">
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>赛时</td>
<td><strong>YES</strong></td>
<td><strong>YES</strong></td>
<td><strong>YES</strong></td>
<td><strong>NO</strong></td>
<td><strong>NO</strong></td>
</tr>
<tr class="even">
<td>补题</td>
<td></td>
<td></td>
<td></td>
<td><strong>YES</strong></td>
<td><strong>NO</strong></td>
</tr>
</tbody>
</table>
<h2 id="a.-little-nikita">A. <a
href="https://codeforces.com/contest/1977/problem/A">Little
Nikita</a></h2>
<p>直觉法可得能凑成的充要条件是<span class="math inline">\((n&gt;m)
\land (n\equiv m \mod 2)\)</span>。</p>
<h2 id="b.-binary-colouring">B. <a
href="https://codeforces.com/contest/1977/problem/B">Binary
Colouring</a></h2>
<p>考虑对于二进制下一段连续的1，设第一位为<span
class="math inline">\(i\)</span>位，最后一位为<span
class="math inline">\(j\)</span>位，给<span
class="math inline">\(j+1\)</span>设为1，再给<span
class="math inline">\(i\)</span>设为-1。</p>
<p>可以发现两个特殊情况会出现两个连续的非0，一是两段连续的1只有一个0隔开。设低位的连续段位<span
class="math inline">\([i, p]\)</span>，高位的为<span
class="math inline">\([p+2, j]\)</span>。我们要将<span
class="math inline">\(p+1\)</span>位置为1，<span
class="math inline">\(p+2\)</span>位置为-1，那么显然可以替换成将<span
class="math inline">\(p+1\)</span>位置为-1。</p>
<p>二是单独一个1的连续段。这种情况下直接将<span
class="math inline">\(i\)</span>置为1，然后考虑用上面类似的策略和低位的1进行等效替换即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Binary Colouring</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 948 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1977/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[<span class="number">40</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (((x &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">int</span> j = i;</span><br><span class="line">		<span class="keyword">while</span> ((x &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">			j++;</span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> == j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; a[i - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				a[j] = <span class="number">1</span>;</span><br><span class="line">				a[i - <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">				n = j + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i] = <span class="number">1</span>;</span><br><span class="line">			n = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[j] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[i - <span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">			a[i] = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			a[i - <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">		i = j;</span><br><span class="line">		n = j + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c.-nikita-and-lcm">C. <a
href="https://codeforces.com/contest/1977/problem/C">Nikita and
LCM</a></h2>
<p>手玩数据可以发现，当序列所有数的<span
class="math inline">\(lcm\)</span>比最大的数还要大时，显然答案一定为n。反之，<span
class="math inline">\(lcm\)</span>就一定等于最大的那个数。同时，<span
class="math inline">\(a\)</span>中所有的数一定都是<span
class="math inline">\(a_n\)</span>的因子，能凑出来的<span
class="math inline">\(lcm\)</span>也一定是<span
class="math inline">\(a_n\)</span>的因子。</p>
<p>排序后，我们暴力枚举<span
class="math inline">\(a_n\)</span>的因子<span
class="math inline">\(d\)</span>，判断它有没有在<span
class="math inline">\(a\)</span>中出现后让它作为最终答案的目标<span
class="math inline">\(lcm\)</span>，然后枚举<span
class="math inline">\(a_i\)</span>看它是不是<span
class="math inline">\(d\)</span>的因子，有就合并<span
class="math inline">\(lcm&#39;\)</span>。然后检查<span
class="math inline">\(lcm&#39;\)</span>是否等于<span
class="math inline">\(d\)</span>，等于的话就直接更新答案。复杂度<span
class="math inline">\(O(n^2)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Nikita and LCM</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 948 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1977/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	ll sum = <span class="number">1</span>;</span><br><span class="line">	map&lt;ll, <span class="type">int</span>&gt; s;</span><br><span class="line">	<span class="type">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		s[a[i]]++;</span><br><span class="line">		sum = sum * a[i] / __gcd(sum, a[i]);</span><br><span class="line">		<span class="keyword">if</span> (sum &gt; (ll)(<span class="number">1e9</span>))</span><br><span class="line">			ok = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (sum != a[n] || ok)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vector&lt;ll&gt; vec;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i * i &lt;= sum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (sum % i == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			vec.<span class="built_in">push_back</span>(i);</span><br><span class="line">			<span class="keyword">if</span> (i * i != sum)</span><br><span class="line">				vec.<span class="built_in">push_back</span>(sum / i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> maxn : vec)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[maxn] != <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		ll s1 = <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (__gcd(a[i], maxn) == a[i])</span><br><span class="line">				cnt++, s1 = (ll)s1 * a[i] / __gcd(a[i], s1);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s1 == maxn)</span><br><span class="line">			ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d.-xorificator">D. <a
href="https://codeforces.com/contest/1977/problem/D">XORificator</a></h2>
<p>可以发现一个性质：当我们指定了对于第<span
class="math inline">\(j\)</span>列对答案有贡献，且第<span
class="math inline">\(i\)</span>行的数字为1时，此时的构造方案唯一确定也就是说，最多只有<span
class="math inline">\(n\times m\)</span>种不同的有效方案可以选择。</p>
<p>考虑枚举令<span
class="math inline">\([i,j]\)</span>上的数字为此列唯一的1，<span
class="math inline">\(\text{Hash}\)</span>算出此时的具体方案，然后全部扔进一个<code>map</code>里，最后选取出现次数最多的那个方案。时间复杂度<span
class="math inline">\(\Theta(nmlog_2(nm))\)</span>，用<code>unordered_map</code>能降到<span
class="math inline">\(\Theta(nm)\)</span>​。</p>
<p>注意本题卡单哈希，算方案时记得用双哈希。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. XORificator</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Codeforces Round 948 (Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1977/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">uint64_t</span> pw1[N], pw2[N];</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span> mod1 = <span class="number">1000000007ULL</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span> mod2 = <span class="number">1000000009ULL</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myHash</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint64_t</span> hash1, hash2;</span><br><span class="line">    <span class="built_in">myHash</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        hash1 = hash2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">myHash <span class="title">changePos</span><span class="params">(myHash hash, <span class="type">int</span> pos, <span class="type">bool</span> originVal, <span class="type">bool</span> newVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (originVal)</span><br><span class="line">    &#123;</span><br><span class="line">        hash.hash1 = (hash.hash1 - pw1[pos] + mod1) % mod1;</span><br><span class="line">        hash.hash2 = (hash.hash2 - pw2[pos] + mod2) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newVal)</span><br><span class="line">    &#123;</span><br><span class="line">        hash.hash1 = (hash.hash1 + pw1[pos]) % mod1;</span><br><span class="line">        hash.hash2 = (hash.hash2 + pw2[pos]) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">toNormal</span><span class="params">(myHash hash)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> h1 = hash.hash1, h2 = hash.hash2;</span><br><span class="line">    <span class="keyword">return</span> (h1 &lt;&lt; <span class="number">31ULL</span>) | h2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            a[i][j] = s[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unordered_map&lt;<span class="type">uint64_t</span>, <span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    string ans_str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        myHash hsh;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            hsh = <span class="built_in">changePos</span>(hsh, i, <span class="number">0</span>, a[i][j]);</span><br><span class="line">            str.<span class="built_in">push_back</span>(a[i][j] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                hsh = <span class="built_in">changePos</span>(hsh, i - <span class="number">1</span>, !a[i - <span class="number">1</span>][j], a[i - <span class="number">1</span>][j]);</span><br><span class="line">                str[i - <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span> + (<span class="type">char</span>)(str[i - <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hsh = <span class="built_in">changePos</span>(hsh, i, a[i][j], !a[i][j]);</span><br><span class="line">            str[i] = <span class="string">&#x27;0&#x27;</span> + (<span class="type">char</span>)(str[i] == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="type">int</span> p = ++s[<span class="built_in">toNormal</span>(hsh)];</span><br><span class="line">            <span class="keyword">if</span> (p &gt; ans)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = p;</span><br><span class="line">                ans_str = str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; hsh.hash1 &lt;&lt; &#x27; &#x27; &lt;&lt; hsh.hash2 &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; ans_str &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    pw1[<span class="number">0</span>] = pw2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pw1[i] = (pw1[i - <span class="number">1</span>] * <span class="number">2ULL</span>) % mod1;</span><br><span class="line">        pw2[i] = (pw2[i - <span class="number">1</span>] * <span class="number">2ULL</span>) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 161</title>
    <url>/2398974998/</url>
    <content><![CDATA[<h2 id="a---tricky-template">A - <a
href="https://codeforces.com/contest/1922/problem/A">Tricky
Template</a></h2>
<p>没啥好说的，就是判断有几个<span
class="math inline">\(a_i=c_i或b_i=c_i\)</span>，有n个说明不行，反之则可以。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string a, b, c;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;]()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> cnt = n;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == c[i] || b[i] == c[i])</span><br><span class="line">				cnt--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cnt &gt; <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">check</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="b---forming-triangles">B - <a
href="https://codeforces.com/contest/1922/problem/B">Forming
Triangles</a></h2>
<p>可以发现，<span class="math inline">\(2^i+2^i =
2^{i+1}\)</span>，可见可构成三角形的只有两种情况：</p>
<ol type="1">
<li>两个相等的和一个小的组合</li>
<li>三个相等的组合</li>
</ol>
<p>简单组合计数一下即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: B. Forming Triangles</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 161 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1922/problem/B</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;ll&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">but</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		but[a[i]]++;</span><br><span class="line">	__int128 big_n = n;</span><br><span class="line">	__int128 ans = <span class="number">0</span>;</span><br><span class="line">	__int128 sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (but[i] &gt; <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			__int128 x = but[i];</span><br><span class="line">			ans += sum * (x * (x - <span class="number">1</span>)) / <span class="number">2ll</span> + (x * (x - <span class="number">1</span>) * (x - <span class="number">2</span>)) / <span class="number">6ll</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sum += but[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> print = [&amp;](__int128 x)</span><br><span class="line">	&#123;</span><br><span class="line">		string s;</span><br><span class="line">		<span class="keyword">while</span> (x)</span><br><span class="line">		&#123;</span><br><span class="line">			s.<span class="built_in">push_back</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">			x /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">if</span> (s.<span class="built_in">size</span>())</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">print</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="c---closest-cities">C - <a
href="https://codeforces.com/contest/1922/problem/C">Closest
Cities</a></h2>
<p>可以发现，最优路线一定是一直朝着终点走，直接正反递推一下距离即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Closest Cities</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 161 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1922/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">ll a[N];</span><br><span class="line">ll dp1[N], dp2[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	a[<span class="number">0</span>] = -llinf;</span><br><span class="line">	a[n + <span class="number">1</span>] = llinf;</span><br><span class="line">	dp1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(a[i - <span class="number">2</span>] - a[i - <span class="number">1</span>]) &lt; <span class="built_in">abs</span>(a[i - <span class="number">1</span>] - a[i]))</span><br><span class="line">			dp1[i] = dp1[i - <span class="number">1</span>] + <span class="built_in">abs</span>(a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			dp1[i] = dp1[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp2[n] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(a[i + <span class="number">2</span>] - a[i + <span class="number">1</span>]) &lt; <span class="built_in">abs</span>(a[i + <span class="number">1</span>] - a[i]))</span><br><span class="line">			dp2[i] = dp2[i + <span class="number">1</span>] + <span class="built_in">abs</span>(a[i] - a[i + <span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			dp2[i] = dp2[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; y)</span><br><span class="line">			cout &lt;&lt; dp1[y] - dp1[x] &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; dp2[y] - dp2[x] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="d---berserk-monsters">D - <a
href="https://codeforces.com/contest/1922/problem/D">Berserk
Monsters</a></h2>
<p>可以发现，除了第一次以外，每一回合中被干掉怪物，在上一回合中，他的左邻居或者右邻居一定被干掉了（不然上一回合就会被干掉）。</p>
<p>也就是说，本次可能被干掉的位置，可以由上一次被干掉的人的位置推算而来。</p>
<p>具体的，我们维护一个链表，每次先删除掉由上一回合标记出来的人的节点，然后查询这些节点的左右邻居是否能被干掉，将能被干掉的节点记录下来，留到下一个回合使用。</p>
<p>第一回合可以直接暴力获取被删掉的节点，直接处理即可。</p>
<p>可以发现，每个节点最多可以被删除一次，每个节点最多拓展出2个下一回合的节点，因此复杂度为<span
class="math inline">\(\Theta(n)\)</span>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D. Berserk Monsters</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 161 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1922/problem/D</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;pii, <span class="type">int</span>&gt; piii;</span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> l[N], r[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="built_in">fill</span>(vis, vis + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; b[i];</span><br><span class="line">	<span class="keyword">auto</span> relative = [&amp;](<span class="type">int</span> x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> v = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (l[x])</span><br><span class="line">			v += a[l[x]];</span><br><span class="line">		<span class="keyword">if</span> (r[x] &lt;= n)</span><br><span class="line">			v += a[r[x]];</span><br><span class="line">		<span class="keyword">return</span> b[x] - v;</span><br><span class="line">	&#125;;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		l[i] = i - <span class="number">1</span>;</span><br><span class="line">		r[i] = i + <span class="number">1</span>;</span><br><span class="line">		q.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">define</span> __DEBUG__ false</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">		vec.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">if</span> (__DEBUG__)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">				cout &lt;&lt; l[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">				cout &lt;&lt; r[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">				cout &lt;&lt; vis[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> id : q)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (l[id] &gt;= <span class="number">0</span> &amp;&amp; !vis[l[id]] &amp;&amp; <span class="built_in">relative</span>(l[id]) &lt; <span class="number">0</span>)</span><br><span class="line">				vec.<span class="built_in">push_back</span>(l[id]), vis[l[id]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (r[id] &lt;= n &amp;&amp; !vis[r[id]] &amp;&amp; <span class="built_in">relative</span>(r[id]) &lt; <span class="number">0</span>)</span><br><span class="line">				vec.<span class="built_in">push_back</span>(r[id]), vis[r[id]] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//sort(vec.begin(), vec.end());</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> id : vec)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (l[id])</span><br><span class="line">				r[l[id]] = r[id];</span><br><span class="line">			<span class="keyword">if</span> (r[id] &lt;= n)</span><br><span class="line">				l[r[id]] = l[id];</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; \n&quot;</span>[__DEBUG__];</span><br><span class="line">		<span class="built_in">swap</span>(q, vec);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e---increasing-subsequences">E - <a
href="https://codeforces.com/contest/1922/problem/E">Increasing
Subsequences</a></h2>
<p>很巧妙的一道构造题。首先，考虑一个严格单增的数列，它的递增子序列个数为：
<span class="math display">\[
C_n^0+C_n^1+ \dots +C_n^n
\]</span></p>
<p>由小学组合数学知识可以知道： <span class="math display">\[
C_n^0+C_n^1+ \dots +C_n^n=2^n
\]</span> 那么，如果<span
class="math inline">\(X\)</span>是2的n次幂，直接输出一个长度为n的单增序列即可。</p>
<p>如果不是的话，一个容易想到的思路是看能否通过在这个单增数列中插入某些数，使得我们能够凑出<span
class="math inline">\(2^0,2^1,2^2\dots
2^{n-1}\)</span>这些数，这样就可以通过二进制拆分凑出X了。</p>
<p>考虑一个单增数列： <span class="math display">\[
1,2,3,4,5,6
\]</span> 这个数列有6个数，所以有<span
class="math inline">\(2^6\)</span>个单增子序列。</p>
<p>那么，如果我们在1和2之间插入一个小于1-6的数（比如说0）： <span
class="math display">\[
1,\mathop{0}\limits_{\uparrow},2,3,4,5,6
\]</span> 经过计算，可以发现，在这个位置插入，正好多出了<span
class="math inline">\(2^{5}\)</span>个。</p>
<p>如果在2和3之间呢？ <span class="math display">\[
1,2,\mathop{0}\limits_{\uparrow},3,4,5,6
\]</span> 计算可得，多出了<span
class="math inline">\(2^4\)</span>个。</p>
<p>以此类推，可以发现，在从后往前数第<span
class="math inline">\(\text{i}\)</span>个位置插入0时，总的个数增多<span
class="math inline">\(2^{i-1}\)</span>。而且，因为插入的数相同，所以这些数之间并不会产生新的贡献。</p>
<p>通过这种方式，就能够构建出一个正好有X个单增子序列的数列了。</p>
<p>因为<span class="math inline">\(X \leq 10^{18} \simeq
2^{60}\)</span>，可以证明，最多不会超过120个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: E. Increasing Subsequences</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 161 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1922/problem/E</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll x;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">	<span class="type">int</span> bit = <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">for</span> (; bit &gt;= <span class="number">0</span>; bit--)</span><br><span class="line">		<span class="keyword">if</span> (x &amp; (<span class="number">1ll</span> &lt;&lt; bit))</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">	vec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = bit - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((<span class="number">1ll</span> &lt;&lt; i) &amp; x)</span><br><span class="line">			vec.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">			vec.<span class="built_in">push_back</span>(++now);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; vec.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : vec)</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f---replace-on-segment">F - <a
href="https://codeforces.com/contest/1922/problem/F">Replace on
Segment</a></h2>
<p>这题没写出来，官方题解写得非常详细，这里贴一个<span
class="math inline">\(\text{DeepL}\)</span>翻译版的。</p>
<blockquote>
<p><a
href="https://codeforces.com/blog/entry/124890">原文链接，侵删</a></p>
<p>首先，我们提出以下主张：如果对一个线段进行操作，可以将结果线段视为一个元素（也就是说，我们可以将受操作影响的元素
"合并
"为一个）。这很直观，但正式的证明有点长，所以如果你对它不感兴趣，请随意跳过接下来用斜体写的段落。</p>
<p><strong>正式证明：</strong>
假设我们将几个相邻的相等元素合并为一个元素。让我们证明这不会改变数组的答案。假设合并相邻相等元素前的数组为
<span class="math inline">\(a\)</span> ，合并后的数组为 <span
class="math inline">\(a&#39;\)</span> 。我们将证明 <span
class="math inline">\(f(a) = f(a&#39;)\)</span> ，其中 <span
class="math inline">\(f(x)\)</span> 是在数组 <span
class="math inline">\(x\)</span> 上解决问题的最少操作数。</p>
<ul>
<li><span class="math inline">\(f(a) \ge f(a&#39;)\)</span>
：假设我们建立了一个操作序列，使 <span class="math inline">\(a\)</span>
中的所有元素都相等。考虑我们合并得到 <span
class="math inline">\(a&#39;\)</span>
的相邻相等元素段。让我们舍弃序列中所有操作中该元素段的所有元素，除了第一个元素，并删除所有现在影响零元素的操作。我们将得到一个有效的操作序列，使
<span class="math inline">\(a&#39;\)</span> 的所有元素都相等。因此，
<span class="math inline">\(a\)</span> 的任何有效操作序列都可以转化为
<span class="math inline">\(a&#39;\)</span>
的有效操作序列（可能会舍弃某些操作），这就是 <span
class="math inline">\(f(a) \ge f(a&#39;)\)</span> 的原因；</li>
<li><span class="math inline">\(f(a) \le f(a&#39;)\)</span>
：假设我们建立了一个操作序列，使 <span
class="math inline">\(a&#39;\)</span>
的所有元素都相等。如果我们在所有操作中 "扩展
"合并分段后得到的元素，那么它就可以转化为 <span
class="math inline">\(a&#39;\)</span> 的有效操作序列。因此， <span
class="math inline">\(f(a) \le f(a&#39;)\)</span> ；</li>
<li>既然 <span class="math inline">\(f(a) \ge f(a&#39;)\)</span> 和
<span class="math inline">\(f(a) \le f(a&#39;)\)</span> ，那么 <span
class="math inline">\(f(a) = f(a&#39;)\)</span> 。</li>
</ul>
<p>这意味着，在对一个分割段进行操作后，接下来的操作要么会影响整个分割段，要么不会影响分割段中的任何元素。</p>
<p>因此我们可以使用下面的动态编程思想：假设 <span
class="math inline">\(dp[l][r][k]\)</span> 是将线段 <span
class="math inline">\([l, r]\)</span> 上的所有元素转化为 <span
class="math inline">\(k\)</span>
所需的最小操作次数。如果我们想将所有元素转化为 <span
class="math inline">\(k\)</span> ，那么有两种选择：</p>
<ul>
<li>要么最后一次运算会将整个线段转化为 <span
class="math inline">\(k\)</span> ，因此我们需要计算从线段中去除所有等于
<span class="math inline">\(k\)</span> 的元素所需的运算次数；</li>
<li>或者将线段 <span class="math inline">\([l, r]\)</span>
分割成几个线段，分别转化为 <span class="math inline">\(k\)</span>
。</li>
</ul>
<p>第二种方案很容易建模：我们遍历两个部分 <span
class="math inline">\(i\)</span> 之间的分割点，并用 <span
class="math inline">\(dp[l][i][k] + dp[i+1][r][k]\)</span> 更新 <span
class="math inline">\(dp[l][r][k]\)</span>
。然而，第一种方案就比较复杂了。</p>
<p>让我们为解决方案引入第二种动态编程：假设 <span
class="math inline">\(dp2[l][r][k]\)</span> 是将 <span
class="math inline">\(k\)</span> 从线段 <span class="math inline">\([l,
r]\)</span> 中移除的最小操作次数。那么，计算 <span
class="math inline">\(dp[l][r][k]\)</span>
的第一种方案就可以通过简单地用 <span class="math inline">\(dp2[l][r][k]
+ 1\)</span> 更新 <span class="math inline">\(dp[l][r][k]\)</span>
来实现。</p>
<p>现在，我们来演示如何计算 <span
class="math inline">\(dp2[l][r][k]\)</span>
。这与第一个动态编程非常相似：</p>
<ul>
<li>要么对线段的最后一次操作会将整个线段转化为其他元素 <span
class="math inline">\(m\)</span> ，因此我们可以对其进行迭代，并用 <span
class="math inline">\(dp[l][r][m]\)</span> 更新 <span
class="math inline">\(dp2[l][r][k]\)</span> ；</li>
<li>或者是将线段 <span class="math inline">\([l, r]\)</span>
分割成两部分，然后分别删除这两部分中等于 <span
class="math inline">\(k\)</span> 的元素（因此我们用 <span
class="math inline">\(dp2[l][i][k] + dp2[i+1][r][k]\)</span> 更新 <span
class="math inline">\(dp2[l][r][k]\)</span> ）。</li>
</ul>
<p>好了，看起来我们在 <span class="math inline">\(O(n^4)\)</span>
中找到了解决方案。不过还有一个问题。我们的动态编程中存在循环依赖关系：</p>
<ul>
<li><span class="math inline">\(dp[l][r][k]\)</span> 依赖于 <span
class="math inline">\(dp2[l][r][k]\)</span> ；</li>
<li><span class="math inline">\(dp2[l][r][k]\)</span> 依赖于 <span
class="math inline">\(dp[l][r][m]\)</span> ，其中 <span
class="math inline">\(m \ne k\)</span> ；</li>
<li><span class="math inline">\(dp[l][r][m]\)</span> 取决于 <span
class="math inline">\(dp2[l][r][m]\)</span> ；</li>
<li><span class="math inline">\(dp2[l][r][m]\)</span> 取决于 <span
class="math inline">\(dp[l][r][k]\)</span> 。</li>
</ul>
<p>我们要么以某种方式处理它们，要么将它们删除。模型解决方法是这样消除这些循环依赖关系的：当我们需要计算
<span class="math inline">\(dp[l][r][k]\)</span>
时，让我们舍弃线段两端所有等于 <span class="math inline">\(k\)</span>
的元素（即把 <span class="math inline">\(l\)</span> 移到 <span
class="math inline">\(l&#39;\)</span> 和 <span
class="math inline">\(r\)</span> 移到 <span
class="math inline">\(r&#39;\)</span> ，其中 <span
class="math inline">\(l&#39;\)</span> 和 <span
class="math inline">\(r&#39;\)</span> 是不等于 <span
class="math inline">\(k\)</span>
的元素的第一次和最后一次出现）。同样，当我们需要计算 <span
class="math inline">\(dp2[l][r][k]\)</span>
时，让我们舍弃线段两端所有不等于 <span class="math inline">\(k\)</span>
的元素。很容易证明这些操作不会使答案变差（如果从数组中删除一个元素，"修复
"数组的最小操作次数不会增加）。要证明这种方法能消除所有循环依赖关系也不难：如果我们考虑前面描述的循环依赖关系，我们可以看到在计算
<span class="math inline">\(dp[l][r][k]\)</span> 时（如果有 <span
class="math inline">\(a_l = k\)</span> ）或在计算 <span
class="math inline">\(dp[l][r][k]\)</span> 时，元素 <span
class="math inline">\(a_l\)</span> 将被从数段中丢弃。(如果 <span
class="math inline">\(a_l = k\)</span> ）或计算 <span
class="math inline">\(dp2[l][r][k]\)</span> （如果 <span
class="math inline">\(a_l \ne k\)</span> ）时， <span
class="math inline">\(a_l\)</span> 元素都会被舍弃。</p>
<p>这样，我们就得到了一个在 <span class="math inline">\(O(n^4)\)</span>​
中运行的动态编程解决方案。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: F. Replace on Segment</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - Educational Codeforces Round 161 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1922/problem/F</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q, x;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= x; k++)</span><br><span class="line">				f[i][j][k] = dp[i][j][k] = inf;</span><br><span class="line">	<span class="comment">// f[i][j][c] : 把i到j的c变成非c</span></span><br><span class="line">	<span class="comment">// dp[i][j][c] : 把i到j全变成c</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= x; c++)</span><br><span class="line">		&#123;</span><br><span class="line">			f[i][i][c] = (a[i] == c);</span><br><span class="line">			dp[i][i][c] = (a[i] != c);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= x; c++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i] == c)</span><br><span class="line">					dp[i][j][c] = <span class="built_in">min</span>(dp[i][j][c], dp[i + <span class="number">1</span>][j][c]);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j][c] = <span class="built_in">min</span>(f[i][j][c], f[i + <span class="number">1</span>][j][c]);</span><br><span class="line">				<span class="keyword">if</span> (a[j] == c)</span><br><span class="line">					dp[i][j][c] = <span class="built_in">min</span>(dp[i][j][c], dp[i][j - <span class="number">1</span>][c]);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					f[i][j][c] = <span class="built_in">min</span>(f[i][j][c], f[i][j - <span class="number">1</span>][c]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= x; c++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k++)</span><br><span class="line">					f[i][j][c] = <span class="built_in">min</span>(f[i][j][c], f[i][k][c] + f[k + <span class="number">1</span>][j][c]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= x; c++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt; j; k++)</span><br><span class="line">					dp[i][j][c] = <span class="built_in">min</span>(dp[i][j][c], dp[i][k][c] + dp[k + <span class="number">1</span>][j][c]);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">1</span>; c &lt;= x; c++)</span><br><span class="line">				dp[i][j][c] = <span class="built_in">min</span>(dp[i][j][c], f[i][j][c] + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> c1 = <span class="number">1</span>; c1 &lt;= x; c1++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> c2 = <span class="number">1</span>; c2 &lt;= x; c2++)</span><br><span class="line">					<span class="keyword">if</span> (c1 != c2)</span><br><span class="line">						f[i][j][c1] = <span class="built_in">min</span>(f[i][j][c1], dp[i][j][c2]);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="type">int</span> ans = inf;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">		ans = <span class="built_in">min</span>(ans, dp[<span class="number">1</span>][n][i]);</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>Educational Codeforces Round 162 Div 2</title>
    <url>/663668401/</url>
    <content><![CDATA[<p>比赛忘记打了，只能赛后补题了（悲</p>
<h2 id="d.-slimes">D. <a
href="https://codeforces.com/contest/1923/problem/D">Slimes</a></h2>
<p>推导一下条件：</p>
<ol type="1">
<li>必须严格大的吃严格小的<span
class="math inline">\(\rightarrow\)</span>相同的不能吃<span
class="math inline">\(\rightarrow\)</span>至少要两个不同的数才能一路吃成一个数</li>
<li>要求最小步数<span
class="math inline">\(\rightarrow\)</span>一个数左右相邻的一串数被吃成一个后，再吃掉这个数本身。</li>
</ol>
<p>第一步判断不同的数可以<span
class="math inline">\(O(n)\)</span>预处理出上一个不同的数位置，2可以通过在前缀和上二分算出。要特判一下相邻的数直接吃的情况。</p>
<p>总复杂度<span class="math inline">\(O(nlogn)\)</span>​。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span>, <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		ans[i] = inf;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="type">bool</span> rev)</span><br><span class="line">	&#123;</span><br><span class="line">		vector&lt;ll&gt; <span class="built_in">sum</span>(n), <span class="built_in">pre</span>(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			sum[i] = i &gt; <span class="number">0</span> ? sum[i - <span class="number">1</span>] + a[i]</span><br><span class="line">						   : a[i];</span><br><span class="line">		pre[n - <span class="number">1</span>] = inf;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">			pre[i] = a[i] == a[i + <span class="number">1</span>] ? pre[i + <span class="number">1</span>]</span><br><span class="line">									  : i + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="type">int</span> it = <span class="built_in">upper_bound</span>(sum.<span class="built_in">begin</span>(), sum.<span class="built_in">end</span>(), sum[i] + a[i]) - sum.<span class="built_in">begin</span>();</span><br><span class="line">			<span class="type">int</span> ans1, ans2;</span><br><span class="line">			ans1 = (it == n) ? inf : it - i;</span><br><span class="line">			ans2 = pre[i + <span class="number">1</span>] - i;</span><br><span class="line">			<span class="type">int</span> realID = rev ? (n - i - <span class="number">1</span>) : i;</span><br><span class="line">			ans[realID] = <span class="built_in">min</span>(ans[realID], <span class="built_in">max</span>(ans1, ans2)); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">if</span> ((i &gt; <span class="number">0</span> &amp;&amp; a[i - <span class="number">1</span>] &gt; a[i]) || (i &lt; n - <span class="number">1</span> &amp;&amp; a[i + <span class="number">1</span>] &gt; a[i]))</span><br><span class="line">			ans[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">check</span>(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">check</span>(<span class="literal">true</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ans)</span><br><span class="line">		cout &lt;&lt; (x &gt; (<span class="type">int</span>)<span class="number">3e5</span> ? <span class="number">-1</span> : x) &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="e.-count-paths">E. <a
href="https://codeforces.com/contest/1923/problem/E">Count
Paths</a></h2>
<p>可以发现，路径可以分为两种：</p>
<ol type="1">
<li>祖先与子孙的</li>
<li>没有祖孙关系的</li>
</ol>
<p>同时，当祖先的颜色与子孙相同时，会挡住子孙与上面的通路，也就是贡献被清零了。</p>
<p>考虑直接启发式合并，用n个<code>std::map</code>来维护以某个节点为根子树每种颜色的贡献，直接合并计算即可。</p>
<p>时间复杂度<span
class="math inline">\(O(nlogn)\)</span>，注意多组数据的清空。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; son[N];</span><br><span class="line"><span class="type">int</span> col[N];</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mp[x][col[x]]++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y : son[x])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y == f)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs</span>(y, x);</span><br><span class="line">		<span class="keyword">if</span> (mp[y].<span class="built_in">contains</span>(col[x]))</span><br><span class="line">		&#123;</span><br><span class="line">			ans += mp[y][col[x]];</span><br><span class="line">			mp[y].<span class="built_in">erase</span>(col[x]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mp[y].<span class="built_in">size</span>() &gt; mp[x].<span class="built_in">size</span>())</span><br><span class="line">			<span class="built_in">swap</span>(mp[x], mp[y]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [key, val] : mp[y])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (mp[x].<span class="built_in">contains</span>(key))</span><br><span class="line">				ans += <span class="number">1LL</span> * val * mp[x][key];</span><br><span class="line">			mp[x][key] += val;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="comment">// clear</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mp[i].<span class="built_in">clear</span>();</span><br><span class="line">		son[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	ans = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		cin &gt;&gt; col[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		son[x].<span class="built_in">emplace_back</span>(y);</span><br><span class="line">		son[y].<span class="built_in">emplace_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">while</span> (t --&gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">work</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>P10572 [JRKSJ R8] +1-1 题解</title>
    <url>/4237946170/</url>
    <content><![CDATA[<h3 id="题目思路">题目思路</h3>
<p>可以发现，非简单路径意味着可以走环，那么若是有两个相邻的点都是左括号或右括号，那么就可以反复走这两个点来刷左括号或右括号。同时，合法括号序列的长度必然为偶数，也就是说两点有合法路径时，必然有一条经过点数为偶数的路径。不妨假设询问路径为从<span
class="math inline">\(x\)</span>到<span
class="math inline">\(y\)</span>，那么当</p>
<ol type="1">
<li><span
class="math inline">\(x\)</span>有与其相连的左括号（称其为<span
class="math inline">\(LL\)</span>点对）</li>
<li><span
class="math inline">\(y\)</span>也有与其相连的右括号（称其为<span
class="math inline">\(RR\)</span>点对）</li>
<li>且<span class="math inline">\(LL\)</span>点对到<span
class="math inline">\(RR\)</span>点对有偶数长度的路径</li>
</ol>
<p>时，必然存在合法路径。</p>
<p>上面得出的结论是充分非必要条件，我们考虑怎么将其扩充为充分必要条件。我们发现，如果<span
class="math inline">\(x\)</span>与某一<span
class="math inline">\(LL\)</span>点对有路径，且到他们的路径之间构成的括号序列合法时，实际上等同于<span
class="math inline">\(x\)</span>就是<span
class="math inline">\(LL\)</span>点对的情况。对<span
class="math inline">\(y\)</span>点也类似，所以下面只对<span
class="math inline">\(x\)</span>分析。由于只要存在这样的<span
class="math inline">\(LL\)</span>就可以，所以我们只需要对<span
class="math inline">\(x\)</span>找到离他最近的的<span
class="math inline">\(LL\)</span>点对。对于最近的<span
class="math inline">\(LL\)</span>点对，显然只会构成<span
class="math inline">\(()()\ldots()\)</span>这样的括号序列（否则就不是最近了）。</p>
<p>对于这种最简单的括号序列，我们可以对原图的部分边的基础上建立一个二分图，只对相邻的左括号和右括号之间进行连边，显然这个二分图只会存在这种最简单的括号路径。这样只要判断<span
class="math inline">\(x\)</span>点是否和某一<span
class="math inline">\(LL\)</span>点对在这个二分图的同一连通块里就可以了。</p>
<p>现在我们解决了上面的条件1、2，考虑怎么转换原来的条件3并加以解决。原来条件3等效于<span
class="math inline">\(LL\)</span>由于<span
class="math inline">\(x\)</span>到<span
class="math inline">\(LL\)</span>的路径一定是偶数，<span
class="math inline">\(y\)</span>到<span
class="math inline">\(RR\)</span>的路径也是偶数，且<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>在同一连通块里，那么只需判断<span
class="math inline">\(x\)</span>到<span
class="math inline">\(y\)</span>是否具有偶数长度的路径。这里可以运用一个小Trick：</p>
<blockquote>
<p>我们考虑尝试对原图的边直接构建二分图。在<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>在同一连通块的前提下，如果原图就是二分图，那么<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>存在偶数路径，当且仅当<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>在二分图的同一边；如果原图不是二分图，那么原图必然存在奇环，也就是必然存在偶数路径。</p>
</blockquote>
<p>最后考虑一种特殊情况：<span class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>之间只存在<span
class="math inline">\(()()\ldots()\)</span>这样的路径，只要判断一下在上面的部分二分图上<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>是否在不同的两边且在这个二分图的同一连通块即可。</p>
<p>下面证明这几种情况的完备性。</p>
<p>如果存在一条合法路径，既不满足<span
class="math inline">\(x\)</span>与<span
class="math inline">\(y\)</span>能找到一条到<span
class="math inline">\(LL\)</span>或<span
class="math inline">\(RR\)</span>点对的路径，也不满足存在一条最简单的括号路径，那么这条路径上既不存在<span
class="math inline">\(((\)</span>和<span
class="math inline">\())\)</span>，也不存在简单的<span
class="math inline">\(()\)</span>，显然只能是空串。因此不存在这样的情况，完备性得证。</p>
<h3 id="code">Code</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(&quot;Ofast,no-stack-protector&quot;)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; to;</span><br><span class="line">    <span class="built_in">Graph</span>() &#123;&#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; col;</span><br><span class="line">    <span class="built_in">Graph</span>(<span class="type">int</span> n)</span><br><span class="line">    &#123;</span><br><span class="line">        to = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n);</span><br><span class="line">        vis = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        col = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkBipartiteGraph</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> blocktype = <span class="number">1</span>, <span class="type">int</span> fa = <span class="number">0</span>, <span class="type">int</span> nowcol = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vis[x] = nowcol;</span><br><span class="line">        col[x] = blocktype;</span><br><span class="line">        <span class="type">bool</span> isBipart = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : to[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (y == fa)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!vis[y])</span><br><span class="line">                isBipart &amp;= <span class="built_in">checkBipartiteGraph</span>(y, blocktype, y, <span class="number">3</span> - nowcol);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (vis[y] == nowcol)</span><br><span class="line">                isBipart = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isBipart;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fillCol</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> col = <span class="number">4</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vis[x] = col;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : to[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[y] == col)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">fillCol</span>(y, col);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        to[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">string a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="function">Graph <span class="title">fullGraph</span><span class="params">(n)</span>, <span class="title">withoutCommom_Graph</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x--;</span><br><span class="line">        y--;</span><br><span class="line">        <span class="keyword">if</span> (a[x] != a[y])</span><br><span class="line">        &#123;</span><br><span class="line">            withoutCommom_Graph.<span class="built_in">add</span>(x, y);</span><br><span class="line">            withoutCommom_Graph.<span class="built_in">add</span>(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">        fullGraph.<span class="built_in">add</span>(x, y);</span><br><span class="line">        fullGraph.<span class="built_in">add</span>(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fullGraph.vis[x] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt1++;</span><br><span class="line">            <span class="keyword">if</span> (fullGraph.<span class="built_in">checkBipartiteGraph</span>(x, cnt1) == <span class="literal">false</span>)</span><br><span class="line">                fullGraph.<span class="built_in">fillCol</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++)</span><br><span class="line">        <span class="keyword">if</span> (withoutCommom_Graph.vis[x] == <span class="number">0</span>)</span><br><span class="line">            withoutCommom_Graph.<span class="built_in">checkBipartiteGraph</span>(x, ++cnt2);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">connectWithLL</span><span class="params">(n)</span>, <span class="title">connectWithRR</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : fullGraph.to[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> blocktype = withoutCommom_Graph.col[x];</span><br><span class="line">            <span class="keyword">if</span> (a[x] == <span class="string">&#x27;(&#x27;</span> &amp;&amp; a[y] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                connectWithLL[blocktype] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[x] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; a[y] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                connectWithRR[blocktype] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; q; t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x--;</span><br><span class="line">        y--;</span><br><span class="line">        <span class="keyword">if</span> (a[x] == a[y] || a[x] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> fullGraphCol_x = fullGraph.col[x], fullGraphCol_y = fullGraph.col[y];</span><br><span class="line">        <span class="keyword">if</span> (fullGraphCol_x != fullGraphCol_y)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> partGraphCol_x = withoutCommom_Graph.col[x], partGraphCol_y = withoutCommom_Graph.col[y];</span><br><span class="line">        <span class="keyword">if</span> (partGraphCol_x == partGraphCol_y)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (connectWithLL[partGraphCol_x] &amp;&amp; connectWithRR[partGraphCol_y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (fullGraph.vis[x] != fullGraph.vis[y] || fullGraph.vis[x] == <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> t = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title>The 2022 ICPC Asia Hangzhou Regional Programming Contest</title>
    <url>/1508439448/</url>
    <content><![CDATA[<h2 id="k---master-of-both">K - Master of Both</h2>
<p>考虑两个字符串比较，可以发现，我们其实并不在意前面相同的部分，以及后面不同的部分，而是只在意两者第一个不相同的位置（不妨叫它“<strong>关键位置</strong>”）。只需比较这个位置的对应字符大小，就能判断字符串的大小。</p>
<p>具体的，我们创建一棵<span
class="math inline">\(\text{Trie}\)</span>树，
依次插入每一个字符串，并且每走一步，都记录下当前位置作为<strong>关键位置</strong>的贡献。在询问时，我们只需要暴力枚举字符集的大小关系，将可用的贡献累加入答案即可。时间复杂度<span
class="math inline">\(\Theta(ns+qs^2)\)</span>，其中<span
class="math inline">\(s\)</span>是字符集大小，可以通过此题。</p>
<p>注意，为了正确比较如<code>aaaaa</code>、<code>aaaaab</code>这样前者是后者前缀的大小，我们需要插入时在每个字符串最后面加上一个“最小的字符”，这样就能够保证最优计数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: K. Master of Both</span></span><br><span class="line"><span class="comment">// Contest: Codeforces - The 2022 ICPC Asia Hangzhou Regional Programming Contest</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/gym/104090/problem/K</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Author: MaxDYF</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> llinf = <span class="number">1ll</span> &lt;&lt; <span class="number">60</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;db, db&gt; pdd;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="type">int</span>&gt; pli;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k, q;</span><br><span class="line">string s;</span><br><span class="line">ll a[<span class="number">27</span>][<span class="number">27</span>];</span><br><span class="line"><span class="type">int</span> tr[N * <span class="number">8</span>][<span class="number">27</span>];</span><br><span class="line">ll cnt[N];</span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">	s = s + (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> nowchar : s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x = nowchar - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; <span class="number">27</span>; y++)</span><br><span class="line">			<span class="keyword">if</span> (x != y &amp;&amp; tr[now][y])</span><br><span class="line">				a[y][x] += cnt[tr[now][y]];</span><br><span class="line">		<span class="keyword">if</span> (!tr[now][x])</span><br><span class="line">			tr[now][x] = ++tot;</span><br><span class="line">		now = tr[now][x];</span><br><span class="line">		cnt[now]++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; s;</span><br><span class="line">		<span class="built_in">insert</span>(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q--)</span><br><span class="line">	&#123;</span><br><span class="line">		string cmp;</span><br><span class="line">		cin &gt;&gt; cmp;</span><br><span class="line">		ll ans = <span class="number">0</span>;</span><br><span class="line">		cmp  = (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>) + cmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; <span class="number">27</span>; j++)</span><br><span class="line">				ans = (ans + a[cmp[j] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>][cmp[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>]);</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>XCPC</tag>
        <tag>ICPC</tag>
      </tags>
  </entry>
  <entry>
    <title>技术学习 Todo List</title>
    <url>/3811036380/</url>
    <content><![CDATA[<p>开个坑，记录一下学过的/正在学的/想要学的技术。</p>
<table>
<colgroup>
<col style="width: 3%" />
<col style="width: 50%" />
<col style="width: 38%" />
<col style="width: 8%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">序号</th>
<th style="text-align: center;">课程名</th>
<th style="text-align: center;">链接</th>
<th>Finished?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">Web入门：MIT Web Development Crash
Course</td>
<td style="text-align: center;">https://weblab.mit.edu/schedule</td>
<td>Finished</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS61A: Structure and Interpretation of
Computer Programs</td>
<td
style="text-align: center;">https://inst.eecs.berkeley.edu/~cs61a/su20/</td>
<td>Not Yet</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>物理电磁学公式汇总（期末复习用）</title>
    <url>/2506421601/</url>
    <content><![CDATA[<h2 id="静电场">静电场</h2>
<h3 id="基础公式">基础公式</h3>
<h4 id="电通量">电通量</h4>
<p><span class="math display">\[
\Phi=\oint_S \vec{E}\mathrm{d}\vec S
\]</span> #### 电势</p>
<p><span class="math display">\[
u_p=\int \frac{\mathrm{d}q}{4\pi\epsilon_0r} \\
\\
u_p=\sum u_{p, i}
\]</span></p>
<h4 id="高斯定理真空环境下">高斯定理（真空环境下）</h4>
<p><span class="math display">\[
\Phi=\oint_S \vec{E}\mathrm{d}\vec S=\frac Q{\epsilon_0}
\]</span></p>
<h4 id="极化强度电位移矢量">极化强度、电位移矢量</h4>
<p><span class="math display">\[
\vec P=\epsilon_0 \chi \vec E \newline
\vec D=\epsilon_0\vec E+\vec P \newline
=\epsilon_0(1+\chi)\vec E
\]</span></p>
<h3 id="二级结论">二级结论</h3>
<h4 id="均匀带电无限长导线">均匀带电无限长导线</h4>
<p><span class="math display">\[
E=\frac{\lambda}{2\pi \epsilon_0x}
\]</span></p>
<h4 id="带电圆环中心轴线">带电圆环中心轴线</h4>
<p><span class="math display">\[
E=\frac{qx}{4\pi\epsilon_0(R^2+x^2)^{\frac 3 2}} \newline
u_p=\frac{q}{4\pi\epsilon_0\sqrt{R^2+x^2}} \newline
\]</span></p>
<h4 id="无限大平板">无限大平板</h4>
<p><span class="math display">\[
E=\frac{\sigma}{2\epsilon_0} \\
\\
\text{(以平板为零势点)}u_p=\frac{\sigma}{2\epsilon_0}x \\
\\
\]</span></p>
<h4 id="球体">球体</h4>
<p>$$ <span class="math display">\[\begin{gather}
E=
\left\{
    \begin{array}{l}
        0, r&lt;R \\
        \\
        \frac{Q}{4\pi\epsilon_0r^2}, r\ge R

    \end{array}
\right. \\
\\
u_p=\left\{
    \begin{array}{l}
        \frac{Q}{4\pi\epsilon_0r}, r&lt;R \\
        \frac{Q}{4\pi\epsilon_0R}, r\ge R \\

    \end{array}
\right. \\
\\
\end{gather}\]</span> $$</p>
<h4 id="带电细杆端点左端">带电细杆端点左端</h4>
<p><span class="math display">\[
E=\frac{\lambda l}{4\pi \epsilon_0x(x+l)} \\
\\
u_p=\frac{\lambda l}{4\pi \epsilon_0x(x+l)}{}
\]</span></p>
<h2 id="稳恒磁场">稳恒磁场</h2>
<h3 id="基础公式-1">基础公式</h3>
<h4 id="毕奥-萨伐尔定律">毕奥-萨伐尔定律</h4>
<p><span class="math display">\[
B=\frac{\mu_0}{4\pi}\int \frac{I\mathrm{d}\vec r \times \vec l}{r^3}
\]</span></p>
<h4 id="安培环路定理">安培环路定理</h4>
<h5 id="真空中">真空中</h5>
<p><span class="math display">\[
\oint_L\vec B\mathrm{d}\vec l=\mu_0\sum I
\]</span></p>
<h5 id="磁介质中">磁介质中</h5>
<p><span class="math display">\[
\oint_L\vec H\mathrm{d}\vec l=\sum I
\]</span></p>
<h4 id="h与b的关系">H与B的关系</h4>
<p>各项同性的磁介质中， <span class="math display">\[
B=\mu H
\]</span></p>
<p>在真空中， <span class="math display">\[
B=\mu_0H
\]</span> <span class="math inline">\(H\)</span>与<span
class="math inline">\(B\)</span>在<strong>各向同性</strong>的磁介质中，方向<strong>相同</strong>；</p>
<p>在<strong>各向异性</strong>的磁介质中，方向<strong>不同</strong></p>
<h2 id="变化电磁场">变化电磁场</h2>
<h3 id="基础公式-2">基础公式</h3>
<h4 id="法拉第电磁感应">法拉第电磁感应</h4>
<p><span class="math display">\[
\epsilon= \frac{\mathrm d \Phi}{ \mathrm d t}
\]</span></p>
<h4 id="感生电场公式">感生电场公式</h4>
<p><span class="math display">\[
\oint_L\vec E \mathrm d \vec l=-\frac{\mathrm d \Phi}{\mathrm d t}
\]</span></p>
<h4 id="求变化磁场中的电动势">求变化磁场中的电动势</h4>
<p><span class="math display">\[
\epsilon=\int_L \vec E \mathrm d \vec l
\]</span></p>
<h4 id="磁力矩磁矩">磁力矩/磁矩</h4>
<p><span class="math display">\[
P_m = I\Delta S \\
\\
M= \vec P \times \vec B = BIS \\
\\
\]</span></p>
<h4 id="磁能密度">磁能密度</h4>
<p><span class="math display">\[
W_m=\frac 1 2 B H
\]</span></p>
<h4 id="麦克斯韦方程">麦克斯韦方程</h4>
<h5 id="静电场高斯定理">静电场高斯定理</h5>
<ol type="1">
<li>静电场是有源场</li>
<li>感生电场是无源场</li>
</ol>
<p><span class="math display">\[
\oint_S\vec D \mathrm d\vec l=\sum q_i
\]</span></p>
<h5 id="电路的环路定理">电路的环路定理</h5>
<ol type="1">
<li>静电场是保守场</li>
<li>感生电场是非保守场</li>
<li>一个变化的磁场必定伴有一个电场。</li>
</ol>
<p><span class="math display">\[
\oint_L\vec E \mathrm d \vec l = -\iint_D\frac{\partial \vec B}{\partial
t}\mathrm d \vec S
\]</span></p>
<h5 id="磁场的高斯定理">磁场的高斯定理</h5>
<ol type="1">
<li>传导电流、位移电流产生的磁场都是无源场</li>
<li>磁力线是无头无尾的闭合曲线。</li>
</ol>
<p><span class="math display">\[
\oint_S \vec B \mathrm d \vec S=0
\]</span></p>
<h5 id="全电流安培环路定理">全电流安培环路定理</h5>
<ol type="1">
<li>传导电流和位移电流都可以激发磁场</li>
<li>它们激发的磁场都是非保守场</li>
<li>一个变化的电场必伴有一个磁场。</li>
</ol>
<p><span class="math display">\[
\oint_L \vec H \mathrm d \vec l= \iint_S (\vec{j_i}+\frac{\partial
D}{\partial t})\mathrm d \vec S
\]</span></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>物理</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数 考前速记</title>
    <url>/1459183596/</url>
    <content><![CDATA[<h2 id="秩相关">秩相关</h2>
<p>$$ <span class="math display">\[\begin{gather}
R(AB) \leq min\{R(A), R(B)\} \\
\\
R(A + B) \leq R(A)+R(B) \\
\\
R(A,B) \leq R(A) + R(B) \\
\\
R(A)+R(B)\leq  n (AB=O)\\
\\
R(A^*)=
\left\{
    \begin{array}{l}
        n, &amp;&amp;  {R(A) = n}  \\
        1, &amp;&amp;  {R(A) = n - 1} &amp; \\
        0, &amp;&amp;  {R(A) &lt; n - 1} &amp; \\

    \end{array}
\right. \\
\\
R(A^TA) = R(AA^T) = R(A)
\end{gather}\]</span> $$</p>
<h2 id="合同相似等价-关系实对称矩阵下">合同/相似/等价
关系(实对称矩阵下)</h2>
<h3 id="关系图">关系图</h3>
<p><span class="math display">\[
\begin{gather}
\{相似矩阵\}\subset \{等价矩阵\}
\\
\{合同矩阵\}\subset \{等价矩阵\}
\\
\{合同矩阵\}\cap \{相似矩阵\} \not= \emptyset
\end{gather}
\]</span></p>
<h3 id="等价矩阵">等价矩阵</h3>
<ol type="1">
<li>秩相等</li>
</ol>
<h3 id="合同矩阵">合同矩阵</h3>
<ol type="1">
<li>等价矩阵的性质</li>
<li><strong>一定对称</strong></li>
<li>正负惯性系数（即正负定）相等</li>
<li>特征值<strong>不一定相等</strong></li>
</ol>
<h3 id="相似矩阵">相似矩阵</h3>
<ol type="1">
<li>合同矩阵的性质（部分）</li>
<li><strong>不一定对称</strong>（例外）</li>
<li>特征值相等</li>
</ol>
<h3 id="其它方面">其它方面</h3>
<p>在正交阵情况下，相似矩阵一定合同，合同矩阵一定正交。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
</search>
